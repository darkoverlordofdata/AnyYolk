(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$(function() {
  var CreditsScene, EggModel, EggView, Game, GameOverScene, GameScene, GameState, HighscoreScene, MenuScene, Stage;
  Game = {
    initialize: function() {
      var model;
      if (Utils.isSupported()) {
        model = new GameState();
        new Stage({
          model: model
        }).render();
        new MenuScene({
          model: model
        });
        new GameScene({
          model: model
        });
        new GameOverScene({
          model: model
        });
        new HighscoreScene({
          model: model
        });
        new CreditsScene({
          model: model
        });
        model.set("scene", "menu");
        $("#stage").on("dragstart selectstart", "*", function(event) {
          return false;
        });
        return document.ontouchmove = function(e) {
          return e.preventDefault();
        };
      } else {
        return $("#unsupported").show();
      }
    }
  };

  /*
  Models ****
   */
  GameState = (function(_super) {
    __extends(GameState, _super);

    function GameState() {
      this.getScoreSubmission = __bind(this.getScoreSubmission, this);
      this.resetGameData = __bind(this.resetGameData, this);
      this.cleanUpEgg = __bind(this.cleanUpEgg, this);
      this.addEggs = __bind(this.addEggs, this);
      this.validateAlive = __bind(this.validateAlive, this);
      this.incrementLevel = __bind(this.incrementLevel, this);
      this.decrementLife = __bind(this.decrementLife, this);
      this.incrementScore = __bind(this.incrementScore, this);
      this.initialize = __bind(this.initialize, this);
      return GameState.__super__.constructor.apply(this, arguments);
    }

    GameState.DefaultGameData = {
      score: 0,
      lives: 3,
      level: 1,
      speedX: 1
    };

    GameState.prototype.defaults = {
      scene: "",
      eggCollection: null,
      speedX: 1
    };

    GameState.prototype.initialize = function() {
      var query;
      this.set("eggCollection", new Backbone.Collection());
      query = new Parse.Query("HighScore");
      query.descending("score");
      query.include("player");
      query.limit(10);
      this.set("highscoreCollection", query.collection());
      this.resetGameData();
      this.get("eggCollection").on("fly", this.incrementScore);
      this.get("eggCollection").on("break", this.decrementLife);
      this.get("eggCollection").on("fly break", this.cleanUpEgg);
      return this.get("eggCollection").on("remove", this.incrementLevel);
    };

    GameState.prototype.incrementScore = function() {
      return this.set("score", this.get("score") + 1);
    };

    GameState.prototype.decrementLife = function() {
      this.set("lives", this.get("lives") - 1);
      return this.validateAlive();
    };

    GameState.prototype.incrementLevel = function() {
      if (this.get("eggCollection").length <= 0) {
        this.set("level", this.get("level") + 1);
        this.set("speedX", this.get("speedX") + 0.25);
        return this.addEggs();
      }
    };

    GameState.prototype.validateAlive = function() {
      if (this.get("lives") <= 0) {
        return this.set("scene", "game_over");
      }
    };

    GameState.prototype.addEggs = function() {
      var i, numEggs, _results;
      numEggs = 10;
      i = 0;
      _results = [];
      while (i < numEggs) {
        this.get("eggCollection").add(new EggModel({
          collectionIndex: i
        }));
        _results.push(i++);
      }
      return _results;
    };

    GameState.prototype.cleanUpEgg = function(eggModel) {
      return this.get("eggCollection").remove(eggModel);
    };

    GameState.prototype.resetGameData = function() {
      return this.set(GameState.DefaultGameData);
    };

    GameState.prototype.getScoreSubmission = function() {
      return ((this.get("level") * 362) << 5) + "." + ((this.get("score") * 672) << 4);
    };

    return GameState;

  })(Backbone.Model);
  EggModel = (function(_super) {
    __extends(EggModel, _super);

    function EggModel() {
      this.eggHitGround = __bind(this.eggHitGround, this);
      this.isSafe = __bind(this.isSafe, this);
      this.nextSprite = __bind(this.nextSprite, this);
      return EggModel.__super__.constructor.apply(this, arguments);
    }

    EggModel.NumSprites = 5;

    EggModel.prototype.defaults = {
      spriteIndex: 1,
      collectionIndex: 0
    };

    EggModel.prototype.nextSprite = function() {
      this.set("spriteIndex", this.get("spriteIndex") + 1);
      if (this.isSafe()) {
        return this.trigger("fly", [this]);
      }
    };

    EggModel.prototype.isSafe = function() {
      return this.get("spriteIndex") >= EggModel.NumSprites;
    };

    EggModel.prototype.eggHitGround = function() {
      if (!this.isSafe()) {
        return this.trigger("break", [this]);
      }
    };

    return EggModel;

  })(Backbone.Model);

  /*
  Views ****
   */
  EggView = (function(_super) {
    __extends(EggView, _super);

    function EggView() {
      this.handleTransitionEnded = __bind(this.handleTransitionEnded, this);
      this.renderRemove = __bind(this.renderRemove, this);
      this.renderFlying = __bind(this.renderFlying, this);
      this.renderHidding = __bind(this.renderHidding, this);
      this.renderBreaking = __bind(this.renderBreaking, this);
      this.renderSprites = __bind(this.renderSprites, this);
      this.render = __bind(this.render, this);
      this.nextSprite = __bind(this.nextSprite, this);
      this.initialize = __bind(this.initialize, this);
      return EggView.__super__.constructor.apply(this, arguments);
    }

    EggView.prototype.className = "egg";

    EggView.prototype.spriteClass = ".egg_sprite_";

    EggView.prototype.eggTemplate = _.template($("#_egg").html());

    EggView.prototype.scene = null;

    EggView.prototype.events = {
      webkitTransitionEnd: "handleTransitionEnded",
      mozTransitionEnd: "handleTransitionEnded",
      transitionend: "handleTransitionEnded"
    };

    EggView.prototype.initialize = function() {
      this.scene = this.options.scene;
      this.gameState = this.options.gameState;
      this.$el.on(Utils.clickDownOrTouch(), this.nextSprite);
      this.model.on("change:spriteIndex", this.renderSprites);
      this.model.on("fly", this.renderFlying);
      return this.model.on("break", this.renderBreaking);
    };

    EggView.prototype.nextSprite = function() {
      if (!this.model.isSafe()) {
        this.model.nextSprite();
        return false;
      }
    };

    EggView.prototype.render = function() {
      var delay, intermission, left, speed, top;
      this.renderSprites();
      intermission = 3.5;
      delay = void 0;
      if (this.model.get("collectionIndex") === 1) {
        delay = intermission;
      } else {
        delay = (Math.random() * 6 + 3) / this.gameState.get("speedX") + (2 * this.model.get("collectionIndex")) + intermission;
      }
      speed = 100 * this.gameState.get("speedX") + Math.random() * 100 - 50;
      left = Math.random() * ($(window).width() - 100) + 30;
      top = $("#stage").height() - 220;
      this.$el.css(Utils.bp() + "transition-delay", delay + "s");
      this.$el.css(Utils.bp() + "transition-duration", $(window).height() / speed + "s");
      this.$el.css(Utils.bp() + "transition-property", "top opacity");
      this.$el.css(Utils.bp() + "transition-timing-function", "linear");
      this.$el.css("left", left + "px");
      this.scene.append(this.$el);
      return Utils.nextTick((function(_this) {
        return function() {
          return _this.$el.css("top", top + "px");
        };
      })(this));
    };

    EggView.prototype.renderSprites = function() {
      return this.$el.html(this.eggTemplate({
        spriteIndex: this.model.get("spriteIndex")
      }));
    };

    EggView.prototype.renderBreaking = function() {
      this.$el.addClass("cracked").addClass("disabled");
      this.$el.css(Utils.bp() + "transition-delay", "0s");
      return this.$el.css(Utils.bp() + "transition-duration", "0.2s");
    };

    EggView.prototype.renderHidding = function() {
      this.$el.addClass("broken");
      this.$el.css(Utils.bp() + "transition-delay", "1s");
      this.$el.css(Utils.bp() + "transition-duration", "0.5s");
      this.$el.css(Utils.bp() + "transition-property", "opacity");
      this.$el.css(Utils.bp() + "transition-timing-function", "linear");
      return this.$el.css("opacity", 0);
    };

    EggView.prototype.renderFlying = function() {
      this.$el.addClass("flying");
      this.$el.css(Utils.bp() + "transition-delay", "0s");
      this.$el.css(Utils.bp() + "transition-duration", "1s");
      this.$el.css(Utils.bp() + "transition-property", "top");
      return this.$el.css(Utils.bp() + "transition-timing-function", "linear");
    };

    EggView.prototype.renderRemove = function() {
      return this.remove();
    };

    EggView.prototype.handleTransitionEnded = function(e) {
      if (e.originalEvent.propertyName === "opacity") {
        this.renderRemove();
      } else if (e.originalEvent.propertyName === "top") {
        this.model.eggHitGround();
      } else {
        if (e.originalEvent.propertyName === Utils.bp() + "transform" || "transform") {
          this.renderHidding();
        }
      }
      return false;
    };

    return EggView;

  })(Backbone.View);
  Stage = (function(_super) {
    __extends(Stage, _super);

    function Stage() {
      this.renderClouds = __bind(this.renderClouds, this);
      this.renderTrees = __bind(this.renderTrees, this);
      this.renderSun = __bind(this.renderSun, this);
      this.renderTiles = __bind(this.renderTiles, this);
      this.render = __bind(this.render, this);
      return Stage.__super__.constructor.apply(this, arguments);
    }

    Stage.prototype.el = "#stage";

    Stage.prototype.tileTemplate = _.template($("#_tile_pair").html());

    Stage.prototype.treeTemplate = _.template($("#_tree").html());

    Stage.prototype.sunTemplate = _.template($("#_sun").html());

    Stage.prototype.cloudTemplate = _.template($("#_cloud").html());

    Stage.prototype.render = function() {
      this.$el.css("height", $(window).height());
      this.renderSun();
      this.renderTrees();
      this.renderTiles();
      return this.renderClouds();
    };

    Stage.prototype.renderTiles = function() {
      this.$(".tile").remove();
      return this.$el.append(this.tileTemplate());
    };

    Stage.prototype.renderSun = function() {
      this.$(".sun").remove();
      return this.$el.append(this.sunTemplate());
    };

    Stage.prototype.renderTrees = function() {
      var i, left, numTrees, _results;
      numTrees = Math.ceil($(window).width() / 200);
      this.$(".tree").remove();
      if (numTrees <= 2) {
        this.$el.append(this.treeTemplate({
          treeNum: 3,
          leftValue: -100
        }));
        return this.$el.append(this.treeTemplate({
          treeNum: 1,
          leftValue: 120
        }));
      } else {
        i = 0;
        _results = [];
        while (i < numTrees) {
          left = Math.random() * 200. + i * 200;
          this.$el.append(this.treeTemplate({
            treeNum: -1,
            leftValue: left - 300
          }));
          _results.push(i++);
        }
        return _results;
      }
    };

    Stage.prototype.renderClouds = function() {
      var delay, dir, i, numClouds, speed, top, _results;
      numClouds = Math.ceil($(window).width() / 200);
      numClouds = (numClouds < 2 ? 2 : numClouds);
      i = 0;
      _results = [];
      while (i < numClouds) {
        top = Math.random() * 50;
        delay = Math.random() * 8 - 4 + (10 * i);
        speed = 20;
        dir = (Math.floor(Math.random() * 2) < 1 ? "left" : "right");
        this.$el.append(this.cloudTemplate({
          delay: delay,
          direction: dir,
          duration: $(window).width() / speed,
          topValue: top
        }));
        _results.push(i++);
      }
      return _results;
    };

    return Stage;

  })(Backbone.View);
  MenuScene = (function(_super) {
    __extends(MenuScene, _super);

    function MenuScene() {
      this.cleanUp = __bind(this.cleanUp, this);
      this.renderRemoveScene = __bind(this.renderRemoveScene, this);
      this.render = __bind(this.render, this);
      this.renderSceneChange = __bind(this.renderSceneChange, this);
      this.handleCreditsButton = __bind(this.handleCreditsButton, this);
      this.handleHighscoreButton = __bind(this.handleHighscoreButton, this);
      this.handlePlayButton = __bind(this.handlePlayButton, this);
      this.initialize = __bind(this.initialize, this);
      return MenuScene.__super__.constructor.apply(this, arguments);
    }

    MenuScene.prototype.className = "menu_scene";

    MenuScene.prototype.events = {
      "animationend .title": "cleanUp",
      "webkitAnimationEnd .title": "cleanUp",
      "mozAnimationEnd .title": "cleanUp"
    };

    MenuScene.prototype.template = _.template($("#_menu").html());

    MenuScene.prototype.sceneName = "menu";

    MenuScene.prototype.initialize = function() {
      this.model.on("change:scene", this.renderSceneChange);
      this.$el.on(Utils.clickUpOrTouch(), "#play_button", this.handlePlayButton);
      this.$el.on(Utils.clickUpOrTouch(), "#highscore_button", this.handleHighscoreButton);
      this.$el.on(Utils.clickUpOrTouch(), "#credits_button", this.handleCreditsButton);
      return this;
    };

    MenuScene.prototype.handlePlayButton = function(e) {
      this.$(".menu_item").addClass("disabled");
      this.model.set("scene", "game");
      return false;
    };

    MenuScene.prototype.handleHighscoreButton = function(e) {
      this.$(".menu_item").addClass("disabled");
      this.model.set("scene", "highscore");
      return false;
    };

    MenuScene.prototype.handleCreditsButton = function(e) {
      this.$(".menu_item").addClass("disabled");
      this.model.set("scene", "credits");
      return false;
    };

    MenuScene.prototype.renderSceneChange = function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    };

    MenuScene.prototype.render = function() {
      this.$el.html(this.template());
      $("#stage").append(this.$el);
      return this;
    };

    MenuScene.prototype.renderRemoveScene = function() {
      this.$(".title").removeClass("display").addClass("removal");
      this.$(".menu_item").addClass("removal");
      this.$(".title").css(Utils.bp() + "animation-name", "raiseTitle");
      this.$(".menu_item").css(Utils.bp() + "animation-name", "raiseMenu");
      return this;
    };

    MenuScene.prototype.cleanUp = function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("title")) {
        this.$el.empty();
      }
      return false;
    };

    return MenuScene;

  })(Backbone.View);
  GameScene = (function(_super) {
    __extends(GameScene, _super);

    function GameScene() {
      this.cleanUp = __bind(this.cleanUp, this);
      this.renderRemoveScene = __bind(this.renderRemoveScene, this);
      this.renderAddEgg = __bind(this.renderAddEgg, this);
      this.renderEggs = __bind(this.renderEggs, this);
      this.renderBackButton = __bind(this.renderBackButton, this);
      this.renderLives = __bind(this.renderLives, this);
      this.renderScore = __bind(this.renderScore, this);
      this.renderLevelLabel = __bind(this.renderLevelLabel, this);
      this.renderLevel = __bind(this.renderLevel, this);
      this.render = __bind(this.render, this);
      this.renderSceneChange = __bind(this.renderSceneChange, this);
      this.handleBackButton = __bind(this.handleBackButton, this);
      this.initialize = __bind(this.initialize, this);
      return GameScene.__super__.constructor.apply(this, arguments);
    }

    GameScene.prototype.className = "game_scene";

    GameScene.prototype.events = {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    };

    GameScene.prototype.scoreTemplate = _.template($("#_game_score").html());

    GameScene.prototype.levelTemplate = _.template($("#_game_level").html());

    GameScene.prototype.livesTemplate = _.template($("#_game_lives").html());

    GameScene.prototype.sceneName = "game";

    GameScene.prototype.initialize = function() {
      this.eggViews = [];
      this.$el.on(Utils.clickUpOrTouch(), ".back_button", this.handleBackButton);
      this.model.on("change:scene", this.renderSceneChange);
      this.model.get("eggCollection").on("add", this.renderAddEgg);
      this.model.on("change:score", this.renderScore);
      this.model.on("change:lives", this.renderLives);
      this.model.on("change:level", this.renderLevel);
      return this.model.on("change:level", this.renderLevelLabel);
    };

    GameScene.prototype.handleBackButton = function(e) {
      this.$(".back_button").addClass("disabled");
      return this.model.set("scene", "menu");
    };

    GameScene.prototype.renderSceneChange = function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    };

    GameScene.prototype.render = function() {
      this.model.resetGameData();
      this.$("#hud").remove();
      this.$el.append("<div id='hud'></div>");
      this.renderLevel();
      setTimeout(((function(_this) {
        return function() {
          return _this.renderLevelLabel();
        };
      })(this)), 1200);
      this.renderScore();
      this.renderLives();
      this.renderBackButton();
      this.renderEggs();
      if ($("#stage ." + this.className).length <= 0) {
        $("#stage").append(this.$el);
      }
      return this;
    };

    GameScene.prototype.renderLevel = function() {
      if (this.$("#game_level").length > 0) {
        this.$("#game_level").replaceWith(this.levelTemplate({
          level: this.model.get("level")
        }));
      } else {
        this.$("#hud").append(this.levelTemplate({
          level: this.model.get("level")
        }));
      }
      return this;
    };

    GameScene.prototype.renderLevelLabel = function() {
      this.$el.append("<p class='level_label'>LEVEL " + this.model.get("level") + "<br>GET READY!</p>");
      setTimeout(((function(_this) {
        return function() {
          return _this.$(".level_label").addClass("removal");
        };
      })(this)), 3000);
      setTimeout(((function(_this) {
        return function() {
          return _this.$(".level_label").remove();
        };
      })(this)), 3300);
      return this;
    };

    GameScene.prototype.renderScore = function() {
      if (this.$("#game_score").length > 0) {
        this.$("#game_score").replaceWith(this.scoreTemplate({
          score: this.model.get("score")
        }));
      } else {
        this.$("#hud").append(this.scoreTemplate({
          score: this.model.get("score")
        }));
      }
      return this;
    };

    GameScene.prototype.renderLives = function() {
      if (this.$("#game_lives").length > 0) {
        this.$("#game_lives").replaceWith(this.livesTemplate({
          lives: this.model.get("lives")
        }));
      } else {
        this.$("#hud").append(this.livesTemplate({
          lives: this.model.get("lives")
        }));
      }
      return this;
    };

    GameScene.prototype.renderBackButton = function() {
      if (this.$(".back_button").length > 0) {
        this.$(".back_button").replaceWith("<div class='back_button'>X</div>");
      } else {
        this.$el.append("<div class='back_button'>X</div>");
      }
      return this;
    };

    GameScene.prototype.renderEggs = function() {
      this.model.addEggs();
      return this;
    };

    GameScene.prototype.renderAddEgg = function(eggModel, collection, options) {
      var eggView;
      eggView = new EggView({
        model: eggModel,
        gameState: this.model,
        scene: this.$el
      });
      eggView.render();
      this.eggViews.push(eggView);
      return this;
    };

    GameScene.prototype.renderRemoveScene = function() {
      this.$(".back_button").css(Utils.bp() + "animation-name", "xRaise");
      this.$("#hud p").css(Utils.bp() + "animation-name", "removeHUD");
      this.$(".egg").css(Utils.bp() + "transition-duration", "0.3s");
      _.each(this.eggViews, (function(_this) {
        return function(eggView) {
          return eggView.renderRemove();
        };
      })(this));
      this.model.get("eggCollection").reset();
      return this;
    };

    GameScene.prototype.cleanUp = function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("back_button")) {
        this.$el.empty();
      }
      return false;
    };

    return GameScene;

  })(Backbone.View);
  GameOverScene = (function(_super) {
    __extends(GameOverScene, _super);

    function GameOverScene() {
      this.cleanUp = __bind(this.cleanUp, this);
      this.renderRemoveScene = __bind(this.renderRemoveScene, this);
      this.render = __bind(this.render, this);
      this.renderSceneChange = __bind(this.renderSceneChange, this);
      this.saveHighScore = __bind(this.saveHighScore, this);
      this.handleFacebookButton = __bind(this.handleFacebookButton, this);
      this.handleReplayButton = __bind(this.handleReplayButton, this);
      this.handleMenuButton = __bind(this.handleMenuButton, this);
      this.initialize = __bind(this.initialize, this);
      return GameOverScene.__super__.constructor.apply(this, arguments);
    }

    GameOverScene.Congrats = ["Not bad", "Good", "Great", "Fantastic", "Smashing!", "Amazing!", "Flying High", "Ridiculous!", "Extraordinary!", "Monstrous!!"];

    GameOverScene.prototype.className = "game_over_scene";

    GameOverScene.prototype.events = {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    };

    GameOverScene.prototype.template = _.template($("#_game_over").html());

    GameOverScene.prototype.sceneName = "game_over";

    GameOverScene.prototype.submitted = false;

    GameOverScene.prototype.initialize = function() {
      this.model.on("change:scene", this.renderSceneChange);
      this.$el.on(Utils.clickUpOrTouch(), ".menu_button", this.handleMenuButton);
      this.$el.on(Utils.clickUpOrTouch(), ".replay_button", this.handleReplayButton);
      return this.$el.on(Utils.clickUpOrTouch(), ".facebook_button", this.handleFacebookButton);
    };

    GameOverScene.prototype.handleMenuButton = function(e) {
      this.$(".menu_item").addClass("disabled");
      return this.model.set("scene", "menu");
    };

    GameOverScene.prototype.handleReplayButton = function(e) {
      this.$(".menu_item").addClass("disabled");
      return this.model.set("scene", "game");
    };

    GameOverScene.prototype.handleFacebookButton = function(e) {
      $(".fb_content").hide();
      $(".facebook_button").addClass("disabled").empty().spin({
        length: 5,
        radius: 5,
        lines: 8,
        width: 3,
        color: "#fff"
      });
      if (Parse.User.current()) {
        return this.saveHighScore();
      } else {
        return Parse.FacebookUtils.logIn(null, {
          success: (function(_this) {
            return function(user) {
              if (!user.existed()) {
                return FB.api("/me", function(response) {
                  if (!response.error) {
                    user.set("displayName", response.name);
                    return user.save(null, {
                      success: function(user) {
                        return _this.saveHighScore();
                      },
                      error: function(user, error) {
                        return console.log("Oops, something went wrong saving your name.");
                      }
                    });
                  } else {
                    return console.log("Oops something went wrong with facebook.");
                  }
                });
              } else {
                return _this.saveHighScore();
              }
            };
          })(this),
          error: (function(_this) {
            return function(user, error) {
              return console.log("Oops, something went wrong.");
            };
          })(this)
        });
      }
    };

    GameOverScene.prototype.saveHighScore = function() {
      var submission;
      submission = {
        score: this.model.getScoreSubmission()
      };
      return Parse.Cloud.run("submitHighscore", submission, {
        success: (function(_this) {
          return function(result) {
            _this.submitted = true;
            return _this.$(".facebook_button").html("Submitted!");
          };
        })(this),
        error: (function(_this) {
          return function(error) {
            _this.submitted = true;
            return _this.$(".facebook_button").html(" X Try Again...").removeClass("disabled");
          };
        })(this)
      });
    };

    GameOverScene.prototype.renderSceneChange = function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    };

    GameOverScene.prototype.render = function() {
      var congratsIndex;
      congratsIndex = (this.model.get("level") > GameOverScene.Congrats.length ? GameOverScene.Congrats.length - 1 : this.model.get("level") - 1);
      this.$el.html(this.template({
        score: this.model.get("score"),
        congrats: GameOverScene.Congrats[congratsIndex]
      }));
      return $("#stage").append(this.$el);
    };

    GameOverScene.prototype.renderRemoveScene = function() {
      this.$(".menu_item").addClass("removal");
      this.$(".summary").addClass("removal");
      this.$(".menu_item").css(Utils.bp() + "animation-name", "raiseMenu");
      return this.$(".summary").css(Utils.bp() + "animation-name", "raiseScores");
    };

    GameOverScene.prototype.cleanUp = function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("summary")) {
        return this.$el.empty();
      }
    };

    return GameOverScene;

  })(Backbone.View);
  HighscoreScene = (function(_super) {
    __extends(HighscoreScene, _super);

    function HighscoreScene() {
      this.cleanUp = __bind(this.cleanUp, this);
      this.renderRemoveScene = __bind(this.renderRemoveScene, this);
      this.renderScore = __bind(this.renderScore, this);
      this.renderScoreCollection = __bind(this.renderScoreCollection, this);
      this.render = __bind(this.render, this);
      this.renderSceneChange = __bind(this.renderSceneChange, this);
      this.handleBackButton = __bind(this.handleBackButton, this);
      this.initialize = __bind(this.initialize, this);
      return HighscoreScene.__super__.constructor.apply(this, arguments);
    }

    HighscoreScene.prototype.className = "highscore_scene";

    HighscoreScene.prototype.events = {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    };

    HighscoreScene.prototype.template = _.template($("#_highscore").html());

    HighscoreScene.prototype.scoreTemplate = _.template($("#_score").html());

    HighscoreScene.prototype.sceneName = "highscore";

    HighscoreScene.prototype.initialize = function() {
      this.model.on("change:scene", this.renderSceneChange);
      this.model.get("highscoreCollection").on("reset", this.renderScoreCollection);
      this.$el.on(Utils.clickUpOrTouch(), ".back_button", this.handleBackButton);
      if (this.model.get("currentScene") === this.sceneName) {
        return this.render();
      }
    };

    HighscoreScene.prototype.handleBackButton = function(e) {
      this.$(".back_button").addClass("disabled");
      this.model.set("scene", "menu");
      return false;
    };

    HighscoreScene.prototype.renderSceneChange = function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    };

    HighscoreScene.prototype.render = function() {
      this.$el.html(this.template());
      this.model.get("highscoreCollection").fetch();
      this.$(".highscore").spin({
        length: 9,
        radius: 10,
        lines: 12,
        width: 4,
        color: "#fff"
      });
      $("#stage").append(this.$el);
      return this;
    };

    HighscoreScene.prototype.renderScoreCollection = function() {
      this.model.get("highscoreCollection").each((function(_this) {
        return function(score, index) {
          return _this.renderScore(score, index);
        };
      })(this));
      $(".highscore .spinner").remove();
      return this;
    };

    HighscoreScene.prototype.renderScore = function(score, index) {
      return this.$("#score_table tbody").append(this.scoreTemplate({
        score: score,
        index: index
      }));
    };

    HighscoreScene.prototype.renderRemoveScene = function() {
      this.$(".menu_item").addClass("removal");
      this.$(".highscore").addClass("removal");
      this.$(".menu_item").css(Utils.bp() + "animation-name", "raiseMenu");
      return this.$(".highscore").css(Utils.bp() + "animation-name", "raiseScores");
    };

    HighscoreScene.prototype.cleanUp = function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("highscore")) {
        return this.$el.empty();
      }
    };

    return HighscoreScene;

  })(Backbone.View);
  CreditsScene = (function(_super) {
    __extends(CreditsScene, _super);

    function CreditsScene() {
      this.cleanUp = __bind(this.cleanUp, this);
      this.renderRemoveScene = __bind(this.renderRemoveScene, this);
      this.render = __bind(this.render, this);
      this.renderSceneChange = __bind(this.renderSceneChange, this);
      this.handleBackButton = __bind(this.handleBackButton, this);
      this.initialize = __bind(this.initialize, this);
      return CreditsScene.__super__.constructor.apply(this, arguments);
    }

    CreditsScene.prototype.className = "credits_scene";

    CreditsScene.prototype.template = _.template($("#_credits").html());

    CreditsScene.prototype.sceneName = "credits";

    CreditsScene.prototype.events = {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    };

    CreditsScene.prototype.initialize = function() {
      this.model.on("change:scene", this.renderSceneChange);
      return this.$el.on(Utils.clickUpOrTouch(), ".back_button", this.handleBackButton);
    };

    CreditsScene.prototype.handleBackButton = function(e) {
      this.$(".back_button").addClass("disabled");
      this.model.set("scene", "menu");
      return false;
    };

    CreditsScene.prototype.renderSceneChange = function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    };

    CreditsScene.prototype.render = function() {
      this.$el.html(this.template());
      $("#stage").append(this.$el);
      return this;
    };

    CreditsScene.prototype.renderRemoveScene = function() {
      this.$(".credits").addClass("removal");
      this.$(".back_button").addClass("removal");
      this.$(".credits").css(Utils.bp() + "animation-name", "raiseMenu");
      return this.$(".back_button").css(Utils.bp() + "animation-name", "raiseMenu");
    };

    CreditsScene.prototype.cleanUp = function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("credits")) {
        return this.$el.empty();
      }
    };

    return CreditsScene;

  })(Backbone.View);
  return Game.initialize();
});

window.Utils = {
  bp: function() {
    var bp;
    bp = "";
    if ($.browser.webkit) {
      bp = "-webkit-";
    } else {
      if ($.browser.mozilla) {
        bp = "-moz-";
      }
    }
    return bp;
  },
  isSupported: function() {
    return !($.browser.msie && parseInt($.browser.version) < 10);
  },
  nextTick: function(func) {
    return setTimeout(func, 0);
  },
  clickUpOrTouch: function(func) {
    if ("ontouchstart" in window) {
      return "touchstart";
    } else {
      return "mouseup";
    }
  },
  clickDownOrTouch: function(func) {
    if ("ontouchstart" in window) {
      return "touchstart";
    } else {
      return "mousedown";
    }
  }
};

$.fn.spin = function(opts) {
  this.each(function() {
    var $this, data;
    $this = $(this);
    data = $this.data();
    if (data.spinner) {
      data.spinner.stop();
      delete data.spinner;
    }
    if (opts !== false) {
      return data.spinner = new Spinner($.extend({
        color: $this.css("color")
      }, opts)).spin(this);
    }
  });
  return this;
};

Parse.initialize("0ZUn1TaDF9G3j6UhvoNFuIVSzF45vpSO9K0rlosM", "oU1ToZ9LNZoMslphpgxQNoVjJXEqoi59M018ZP08");

window.fbAsyncInit = function() {
  return Parse.FacebookUtils.init({
    appId: "1380103182250520",
    channelUrl: "/channel.html",
    status: true,
    cookie: true,
    xfbml: true
  });
};

(function(d, debug) {
  var id, js, ref;
  js = void 0;
  id = "facebook-jssdk";
  ref = d.getElementsByTagName("script")[0];
  if (d.getElementById(id)) {
    return;
  }
  js = d.createElement("script");
  js.id = id;
  js.async = true;
  js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
  return ref.parentNode.insertBefore(js, ref);
})(document, false);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
