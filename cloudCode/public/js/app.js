(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
$(function() {
  var CreditsScene, EggModel, EggView, Game, GameOverScene, GameScene, GameState, HighscoreScene, MenuScene, Stage;
  Game = {
    initialize: function() {
      var model;
      if (Utils.isSupported()) {
        model = new GameState();
        new Stage({
          model: model
        }).render();
        new MenuScene({
          model: model
        });
        new GameScene({
          model: model
        });
        new GameOverScene({
          model: model
        });
        new HighscoreScene({
          model: model
        });
        new CreditsScene({
          model: model
        });
        model.set("scene", "menu");
        $("#stage").on("dragstart selectstart", "*", function(event) {
          return false;
        });
        return document.ontouchmove = function(e) {
          return e.preventDefault();
        };
      } else {
        return $("#unsupported").show();
      }
    }
  };

  /*
  Models ****
   */
  GameState = Backbone.Model.extend({
    defaults: {
      scene: "",
      eggCollection: null,
      speedX: 1
    },
    initialize: function() {
      var query;
      _.bindAll(this);
      this.set("eggCollection", new Backbone.Collection());
      query = new Parse.Query("HighScore");
      query.descending("score");
      query.include("player");
      query.limit(10);
      this.set("highscoreCollection", query.collection());
      this.resetGameData();
      this.get("eggCollection").on("fly", this.incrementScore);
      this.get("eggCollection").on("break", this.decrementLife);
      this.get("eggCollection").on("fly break", this.cleanUpEgg);
      return this.get("eggCollection").on("remove", this.incrementLevel);
    },
    incrementScore: function() {
      return this.set("score", this.get("score") + 1);
    },
    decrementLife: function() {
      this.set("lives", this.get("lives") - 1);
      return this.validateAlive();
    },
    incrementLevel: function() {
      if (this.get("eggCollection").length <= 0) {
        this.set("level", this.get("level") + 1);
        this.set("speedX", this.get("speedX") + 0.25);
        return this.addEggs();
      }
    },
    validateAlive: function() {
      if (this.get("lives") <= 0) {
        return this.set("scene", "game_over");
      }
    },
    addEggs: function() {
      var i, numEggs, _results;
      numEggs = 10;
      i = 0;
      _results = [];
      while (i < numEggs) {
        this.get("eggCollection").add(new EggModel({
          collectionIndex: i
        }));
        _results.push(i++);
      }
      return _results;
    },
    cleanUpEgg: function(eggModel) {
      return this.get("eggCollection").remove(eggModel);
    },
    resetGameData: function() {
      return this.set(GameState.DefaultGameData);
    },
    getScoreSubmission: function() {
      return ((this.get("level") * 362) << 5) + "." + ((this.get("score") * 672) << 4);
    }
  }, {
    DefaultGameData: {
      score: 0,
      lives: 3,
      level: 1,
      speedX: 1
    }
  });
  EggModel = Backbone.Model.extend({
    defaults: {
      spriteIndex: 1,
      collectionIndex: 0
    },
    initialize: function() {
      return _.bindAll(this);
    },
    nextSprite: function() {
      this.set("spriteIndex", this.get("spriteIndex") + 1);
      if (this.isSafe()) {
        return this.trigger("fly", [this]);
      }
    },
    isSafe: function() {
      return this.get("spriteIndex") >= EggModel.NumSprites;
    },
    eggHitGround: function() {
      if (!this.isSafe()) {
        return this.trigger("break", [this]);
      }
    }
  }, {
    NumSprites: 5
  });

  /*
  Views ****
   */
  EggView = Backbone.View.extend({
    className: "egg",
    spriteClass: ".egg_sprite_",
    eggTemplate: _.template($("#_egg").html()),
    scene: null,
    events: {
      webkitTransitionEnd: "handleTransitionEnded",
      mozTransitionEnd: "handleTransitionEnded",
      transitionend: "handleTransitionEnded"
    },
    initialize: function() {
      _.bindAll(this);
      this.scene = this.options.scene;
      this.gameState = this.options.gameState;
      this.$el.on(Utils.clickDownOrTouch(), this.nextSprite);
      this.model.on("change:spriteIndex", this.renderSprites);
      this.model.on("fly", this.renderFlying);
      return this.model.on("break", this.renderBreaking);
    },
    nextSprite: function() {
      if (!this.model.isSafe()) {
        this.model.nextSprite();
        return false;
      }
    },
    render: function() {
      var delay, intermission, left, self, speed, top;
      self = this;
      this.renderSprites();
      intermission = 3.5;
      delay = void 0;
      if (this.model.get("collectionIndex") === 1) {
        delay = intermission;
      } else {
        delay = (Math.random() * 6 + 3) / this.gameState.get("speedX") + (2 * this.model.get("collectionIndex")) + intermission;
      }
      speed = 100 * this.gameState.get("speedX") + Math.random() * 100 - 50;
      left = Math.random() * ($(window).width() - 100) + 30;
      top = $("#stage").height() - 220;
      this.$el.css(Utils.bp() + "transition-delay", delay + "s");
      this.$el.css(Utils.bp() + "transition-duration", $(window).height() / speed + "s");
      this.$el.css(Utils.bp() + "transition-property", "top opacity");
      this.$el.css(Utils.bp() + "transition-timing-function", "linear");
      this.$el.css("left", left + "px");
      this.scene.append(this.$el);
      return Utils.nextTick(function() {
        return self.$el.css("top", top + "px");
      });
    },
    renderSprites: function() {
      return this.$el.html(this.eggTemplate({
        spriteIndex: this.model.get("spriteIndex")
      }));
    },
    renderBreaking: function() {
      this.$el.addClass("cracked").addClass("disabled");
      this.$el.css(Utils.bp() + "transition-delay", "0s");
      return this.$el.css(Utils.bp() + "transition-duration", "0.2s");
    },
    renderHidding: function() {
      this.$el.addClass("broken");
      this.$el.css(Utils.bp() + "transition-delay", "1s");
      this.$el.css(Utils.bp() + "transition-duration", "0.5s");
      this.$el.css(Utils.bp() + "transition-property", "opacity");
      this.$el.css(Utils.bp() + "transition-timing-function", "linear");
      return this.$el.css("opacity", 0);
    },
    renderFlying: function() {
      this.$el.addClass("flying");
      this.$el.css(Utils.bp() + "transition-delay", "0s");
      this.$el.css(Utils.bp() + "transition-duration", "1s");
      this.$el.css(Utils.bp() + "transition-property", "top");
      return this.$el.css(Utils.bp() + "transition-timing-function", "linear");
    },
    renderRemove: function() {
      return this.remove();
    },
    handleTransitionEnded: function(e) {
      var self;
      self = this;
      if (e.originalEvent.propertyName === "opacity") {
        self.renderRemove();
      } else if (e.originalEvent.propertyName === "top") {
        self.model.eggHitGround();
      } else {
        if (e.originalEvent.propertyName === Utils.bp() + "transform" || "transform") {
          self.renderHidding();
        }
      }
      return false;
    }
  });
  Stage = Backbone.View.extend({
    el: "#stage",
    tileTemplate: _.template($("#_tile_pair").html()),
    treeTemplate: _.template($("#_tree").html()),
    sunTemplate: _.template($("#_sun").html()),
    cloudTemplate: _.template($("#_cloud").html()),
    initialize: function() {
      return _.bindAll(this);
    },
    render: function() {
      this.$el.css("height", $(window).height());
      this.renderSun();
      this.renderTrees();
      this.renderTiles();
      return this.renderClouds();
    },
    renderTiles: function() {
      this.$(".tile").remove();
      return this.$el.append(this.tileTemplate());
    },
    renderSun: function() {
      this.$(".sun").remove();
      return this.$el.append(this.sunTemplate());
    },
    renderTrees: function() {
      var i, left, numTrees, _results;
      numTrees = Math.ceil($(window).width() / 200);
      this.$(".tree").remove();
      if (numTrees <= 2) {
        this.$el.append(this.treeTemplate({
          treeNum: 3,
          leftValue: -100
        }));
        return this.$el.append(this.treeTemplate({
          treeNum: 1,
          leftValue: 120
        }));
      } else {
        i = 0;
        _results = [];
        while (i < numTrees) {
          left = Math.random() * 200. + i * 200;
          this.$el.append(this.treeTemplate({
            treeNum: -1,
            leftValue: left - 300
          }));
          _results.push(i++);
        }
        return _results;
      }
    },
    renderClouds: function() {
      var delay, dir, i, numClouds, speed, top, _results;
      numClouds = Math.ceil($(window).width() / 200);
      numClouds = (numClouds < 2 ? 2 : numClouds);
      i = 0;
      _results = [];
      while (i < numClouds) {
        top = Math.random() * 50;
        delay = Math.random() * 8 - 4 + (10 * i);
        speed = 20;
        dir = (Math.floor(Math.random() * 2) < 1 ? "left" : "right");
        this.$el.append(this.cloudTemplate({
          delay: delay,
          direction: dir,
          duration: $(window).width() / speed,
          topValue: top
        }));
        _results.push(i++);
      }
      return _results;
    }
  });
  MenuScene = Backbone.View.extend({
    className: "menu_scene",
    events: {
      "animationend .title": "cleanUp",
      "webkitAnimationEnd .title": "cleanUp",
      "mozAnimationEnd .title": "cleanUp"
    },
    template: _.template($("#_menu").html()),
    sceneName: "menu",
    initialize: function() {
      _.bindAll(this);
      this.model.on("change:scene", this.renderSceneChange);
      this.$el.on(Utils.clickUpOrTouch(), "#play_button", this.handlePlayButton);
      this.$el.on(Utils.clickUpOrTouch(), "#highscore_button", this.handleHighscoreButton);
      this.$el.on(Utils.clickUpOrTouch(), "#credits_button", this.handleCreditsButton);
      return this;
    },
    handlePlayButton: function(e) {
      this.$(".menu_item").addClass("disabled");
      this.model.set("scene", "game");
      return false;
    },
    handleHighscoreButton: function(e) {
      this.$(".menu_item").addClass("disabled");
      this.model.set("scene", "highscore");
      return false;
    },
    handleCreditsButton: function(e) {
      this.$(".menu_item").addClass("disabled");
      this.model.set("scene", "credits");
      return false;
    },
    renderSceneChange: function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    },
    render: function() {
      this.$el.html(this.template());
      $("#stage").append(this.$el);
      return this;
    },
    renderRemoveScene: function() {
      this.$(".title").removeClass("display").addClass("removal");
      this.$(".menu_item").addClass("removal");
      this.$(".title").css(Utils.bp() + "animation-name", "raiseTitle");
      this.$(".menu_item").css(Utils.bp() + "animation-name", "raiseMenu");
      return this;
    },
    cleanUp: function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("title")) {
        this.$el.empty();
      }
      return false;
    }
  });
  GameScene = Backbone.View.extend({
    className: "game_scene",
    events: {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    },
    scoreTemplate: _.template($("#_game_score").html()),
    levelTemplate: _.template($("#_game_level").html()),
    livesTemplate: _.template($("#_game_lives").html()),
    sceneName: "game",
    initialize: function() {
      _.bindAll(this);
      this.eggViews = [];
      this.$el.on(Utils.clickUpOrTouch(), ".back_button", this.handleBackButton);
      this.model.on("change:scene", this.renderSceneChange);
      this.model.get("eggCollection").on("add", this.renderAddEgg);
      this.model.on("change:score", this.renderScore);
      this.model.on("change:lives", this.renderLives);
      this.model.on("change:level", this.renderLevel);
      return this.model.on("change:level", this.renderLevelLabel);
    },
    handleBackButton: function(e) {
      this.$(".back_button").addClass("disabled");
      return this.model.set("scene", "menu");
    },
    renderSceneChange: function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    },
    render: function() {
      var self;
      self = this;
      this.model.resetGameData();
      this.$("#hud").remove();
      this.$el.append("<div id='hud'></div>");
      this.renderLevel();
      setTimeout((function() {
        return self.renderLevelLabel();
      }), 1200);
      this.renderScore();
      this.renderLives();
      this.renderBackButton();
      this.renderEggs();
      if ($("#stage ." + this.className).length <= 0) {
        $("#stage").append(this.$el);
      }
      return this;
    },
    renderLevel: function() {
      if (this.$("#game_level").length > 0) {
        this.$("#game_level").replaceWith(this.levelTemplate({
          level: this.model.get("level")
        }));
      } else {
        this.$("#hud").append(this.levelTemplate({
          level: this.model.get("level")
        }));
      }
      return this;
    },
    renderLevelLabel: function() {
      this.$el.append("<p class='level_label'>LEVEL " + this.model.get("level") + "<br>GET READY!</p>");
      setTimeout((function() {
        return this.$(".level_label").addClass("removal");
      }), 3000);
      setTimeout((function() {
        return this.$(".level_label").remove();
      }), 3300);
      return this;
    },
    renderScore: function() {
      if (this.$("#game_score").length > 0) {
        this.$("#game_score").replaceWith(this.scoreTemplate({
          score: this.model.get("score")
        }));
      } else {
        this.$("#hud").append(this.scoreTemplate({
          score: this.model.get("score")
        }));
      }
      return this;
    },
    renderLives: function() {
      if (this.$("#game_lives").length > 0) {
        this.$("#game_lives").replaceWith(this.livesTemplate({
          lives: this.model.get("lives")
        }));
      } else {
        this.$("#hud").append(this.livesTemplate({
          lives: this.model.get("lives")
        }));
      }
      return this;
    },
    renderBackButton: function() {
      if (this.$(".back_button").length > 0) {
        this.$(".back_button").replaceWith("<div class='back_button'>X</div>");
      } else {
        this.$el.append("<div class='back_button'>X</div>");
      }
      return this;
    },
    renderEggs: function() {
      this.model.addEggs();
      return this;
    },
    renderAddEgg: function(eggModel, collection, options) {
      var eggView;
      eggView = new EggView({
        model: eggModel,
        gameState: this.model,
        scene: this.$el
      });
      eggView.render();
      this.eggViews.push(eggView);
      return this;
    },
    renderRemoveScene: function() {
      this.$(".back_button").css(Utils.bp() + "animation-name", "xRaise");
      this.$("#hud p").css(Utils.bp() + "animation-name", "removeHUD");
      this.$(".egg").css(Utils.bp() + "transition-duration", "0.3s");
      _.each(this.eggViews, function(eggView) {
        return eggView.renderRemove();
      });
      this.model.get("eggCollection").reset();
      return this;
    },
    cleanUp: function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("back_button")) {
        this.$el.empty();
      }
      return false;
    }
  });
  GameOverScene = Backbone.View.extend({
    className: "game_over_scene",
    events: {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    },
    template: _.template($("#_game_over").html()),
    sceneName: "game_over",
    submitted: false,
    initialize: function() {
      _.bindAll(this);
      this.model.on("change:scene", this.renderSceneChange);
      this.$el.on(Utils.clickUpOrTouch(), ".menu_button", this.handleMenuButton);
      this.$el.on(Utils.clickUpOrTouch(), ".replay_button", this.handleReplayButton);
      return this.$el.on(Utils.clickUpOrTouch(), ".facebook_button", this.handleFacebookButton);
    },
    handleMenuButton: function(e) {
      this.$(".menu_item").addClass("disabled");
      return this.model.set("scene", "menu");
    },
    handleReplayButton: function(e) {
      this.$(".menu_item").addClass("disabled");
      return this.model.set("scene", "game");
    },
    handleFacebookButton: function(e) {
      var self;
      self = this;
      $(".fb_content").hide();
      $(".facebook_button").addClass("disabled").empty().spin({
        length: 5,
        radius: 5,
        lines: 8,
        width: 3,
        color: "#fff"
      });
      if (Parse.User.current()) {
        return this.saveHighScore();
      } else {
        return Parse.FacebookUtils.logIn(null, {
          success: function(user) {
            if (!user.existed()) {
              return FB.api("/me", function(response) {
                if (!response.error) {
                  user.set("displayName", response.name);
                  return user.save(null, {
                    success: function(user) {
                      return self.saveHighScore();
                    },
                    error: function(user, error) {
                      return console.log("Oops, something went wrong saving your name.");
                    }
                  });
                } else {
                  return console.log("Oops something went wrong with facebook.");
                }
              });
            } else {
              return self.saveHighScore();
            }
          },
          error: function(user, error) {
            return console.log("Oops, something went wrong.");
          }
        });
      }
    },
    saveHighScore: function() {
      var self, submission;
      self = this;
      submission = {
        score: this.model.getScoreSubmission()
      };
      return Parse.Cloud.run("submitHighscore", submission, {
        success: function(result) {
          self.submitted = true;
          return self.$(".facebook_button").html("Submitted!");
        },
        error: function(error) {
          self.submitted = true;
          return self.$(".facebook_button").html(" X Try Again...").removeClass("disabled");
        }
      });
    },
    renderSceneChange: function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    },
    render: function() {
      var congratsIndex;
      congratsIndex = (this.model.get("level") > GameOverScene.Congrats.length ? GameOverScene.Congrats.length - 1 : this.model.get("level") - 1);
      this.$el.html(this.template({
        score: this.model.get("score"),
        congrats: GameOverScene.Congrats[congratsIndex]
      }));
      return $("#stage").append(this.$el);
    },
    renderRemoveScene: function() {
      this.$(".menu_item").addClass("removal");
      this.$(".summary").addClass("removal");
      this.$(".menu_item").css(Utils.bp() + "animation-name", "raiseMenu");
      return this.$(".summary").css(Utils.bp() + "animation-name", "raiseScores");
    },
    cleanUp: function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("summary")) {
        return this.$el.empty();
      }
    }
  }, {
    Congrats: ["Not bad", "Good", "Great", "Fantastic", "Smashing!", "Amazing!", "Flying High", "Ridiculous!", "Extraordinary!", "Monstrous!!"]
  });
  HighscoreScene = Backbone.View.extend({
    className: "highscore_scene",
    events: {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    },
    template: _.template($("#_highscore").html()),
    scoreTemplate: _.template($("#_score").html()),
    sceneName: "highscore",
    initialize: function() {
      _.bindAll(this);
      this.model.on("change:scene", this.renderSceneChange);
      this.model.get("highscoreCollection").on("reset", this.renderScoreCollection);
      this.$el.on(Utils.clickUpOrTouch(), ".back_button", this.handleBackButton);
      if (this.model.get("currentScene") === this.sceneName) {
        return this.render();
      }
    },
    handleBackButton: function(e) {
      this.$(".back_button").addClass("disabled");
      this.model.set("scene", "menu");
      return false;
    },
    renderSceneChange: function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    },
    render: function() {
      var self;
      self = this;
      this.$el.html(this.template());
      this.model.get("highscoreCollection").fetch();
      this.$(".highscore").spin({
        length: 9,
        radius: 10,
        lines: 12,
        width: 4,
        color: "#fff"
      });
      $("#stage").append(this.$el);
      return this;
    },
    renderScoreCollection: function() {
      var self;
      self = this;
      this.model.get("highscoreCollection").each(function(score, index) {
        return self.renderScore(score, index);
      });
      $(".highscore .spinner").remove();
      return this;
    },
    renderScore: function(score, index) {
      return this.$("#score_table tbody").append(this.scoreTemplate({
        score: score,
        index: index
      }));
    },
    renderRemoveScene: function() {
      this.$(".menu_item").addClass("removal");
      this.$(".highscore").addClass("removal");
      this.$(".menu_item").css(Utils.bp() + "animation-name", "raiseMenu");
      return this.$(".highscore").css(Utils.bp() + "animation-name", "raiseScores");
    },
    cleanUp: function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("highscore")) {
        return this.$el.empty();
      }
    }
  });
  CreditsScene = Backbone.View.extend({
    className: "credits_scene",
    template: _.template($("#_credits").html()),
    sceneName: "credits",
    events: {
      animationend: "cleanUp",
      webkitAnimationEnd: "cleanUp",
      mozAnimationEnd: "cleanUp"
    },
    initialize: function() {
      _.bindAll(this);
      this.model.on("change:scene", this.renderSceneChange);
      return this.$el.on(Utils.clickUpOrTouch(), ".back_button", this.handleBackButton);
    },
    handleBackButton: function(e) {
      this.$(".back_button").addClass("disabled");
      this.model.set("scene", "menu");
      return false;
    },
    renderSceneChange: function(model, scene) {
      if (model.previous("scene") === this.sceneName) {
        this.renderRemoveScene();
      } else {
        if (scene === this.sceneName) {
          this.render();
        }
      }
      return this;
    },
    render: function() {
      var self;
      self = this;
      this.$el.html(this.template());
      $("#stage").append(this.$el);
      return this;
    },
    renderRemoveScene: function() {
      this.$(".credits").addClass("removal");
      this.$(".back_button").addClass("removal");
      this.$(".credits").css(Utils.bp() + "animation-name", "raiseMenu");
      return this.$(".back_button").css(Utils.bp() + "animation-name", "raiseMenu");
    },
    cleanUp: function(e) {
      if (this.model.get("scene") !== this.sceneName && $(e.target).hasClass("credits")) {
        return this.$el.empty();
      }
    }
  });
  return Game.initialize();
});

window.Utils = {
  bp: function() {
    var bp;
    bp = "";
    if ($.browser.webkit) {
      bp = "-webkit-";
    } else {
      if ($.browser.mozilla) {
        bp = "-moz-";
      }
    }
    return bp;
  },
  isSupported: function() {
    return !($.browser.msie && parseInt($.browser.version) < 10);
  },
  nextTick: function(func) {
    return setTimeout(func, 0);
  },
  clickUpOrTouch: function(func) {
    if ("ontouchstart" in window) {
      return "touchstart";
    } else {
      return "mouseup";
    }
  },
  clickDownOrTouch: function(func) {
    if ("ontouchstart" in window) {
      return "touchstart";
    } else {
      return "mousedown";
    }
  }
};

$.fn.spin = function(opts) {
  this.each(function() {
    var $this, data;
    $this = $(this);
    data = $this.data();
    if (data.spinner) {
      data.spinner.stop();
      delete data.spinner;
    }
    if (opts !== false) {
      return data.spinner = new Spinner($.extend({
        color: $this.css("color")
      }, opts)).spin(this);
    }
  });
  return this;
};

Parse.initialize("0ZUn1TaDF9G3j6UhvoNFuIVSzF45vpSO9K0rlosM", "oU1ToZ9LNZoMslphpgxQNoVjJXEqoi59M018ZP08");

window.fbAsyncInit = function() {
  return Parse.FacebookUtils.init({
    appId: "1380103182250520",
    channelUrl: "/channel.html",
    status: true,
    cookie: true,
    xfbml: true
  });
};

(function(d, debug) {
  var id, js, ref;
  js = void 0;
  id = "facebook-jssdk";
  ref = d.getElementsByTagName("script")[0];
  if (d.getElementById(id)) {
    return;
  }
  js = d.createElement("script");
  js.id = id;
  js.async = true;
  js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
  return ref.parentNode.insertBefore(js, ref);
})(document, false);

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvaG9tZS9icnVjZS9wYXJzZS9BbnlZb2xrL3RtcC9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS43LjFcbiQoZnVuY3Rpb24oKSB7XG4gIHZhciBDcmVkaXRzU2NlbmUsIEVnZ01vZGVsLCBFZ2dWaWV3LCBHYW1lLCBHYW1lT3ZlclNjZW5lLCBHYW1lU2NlbmUsIEdhbWVTdGF0ZSwgSGlnaHNjb3JlU2NlbmUsIE1lbnVTY2VuZSwgU3RhZ2U7XG4gIEdhbWUgPSB7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbW9kZWw7XG4gICAgICBpZiAoVXRpbHMuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICBtb2RlbCA9IG5ldyBHYW1lU3RhdGUoKTtcbiAgICAgICAgbmV3IFN0YWdlKHtcbiAgICAgICAgICBtb2RlbDogbW9kZWxcbiAgICAgICAgfSkucmVuZGVyKCk7XG4gICAgICAgIG5ldyBNZW51U2NlbmUoe1xuICAgICAgICAgIG1vZGVsOiBtb2RlbFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3IEdhbWVTY2VuZSh7XG4gICAgICAgICAgbW9kZWw6IG1vZGVsXG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgR2FtZU92ZXJTY2VuZSh7XG4gICAgICAgICAgbW9kZWw6IG1vZGVsXG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgSGlnaHNjb3JlU2NlbmUoe1xuICAgICAgICAgIG1vZGVsOiBtb2RlbFxuICAgICAgICB9KTtcbiAgICAgICAgbmV3IENyZWRpdHNTY2VuZSh7XG4gICAgICAgICAgbW9kZWw6IG1vZGVsXG4gICAgICAgIH0pO1xuICAgICAgICBtb2RlbC5zZXQoXCJzY2VuZVwiLCBcIm1lbnVcIik7XG4gICAgICAgICQoXCIjc3RhZ2VcIikub24oXCJkcmFnc3RhcnQgc2VsZWN0c3RhcnRcIiwgXCIqXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50Lm9udG91Y2htb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJChcIiN1bnN1cHBvcnRlZFwiKS5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qXG4gIE1vZGVscyAqKioqXG4gICAqL1xuICBHYW1lU3RhdGUgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICBzY2VuZTogXCJcIixcbiAgICAgIGVnZ0NvbGxlY3Rpb246IG51bGwsXG4gICAgICBzcGVlZFg6IDFcbiAgICB9LFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHF1ZXJ5O1xuICAgICAgXy5iaW5kQWxsKHRoaXMpO1xuICAgICAgdGhpcy5zZXQoXCJlZ2dDb2xsZWN0aW9uXCIsIG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKCkpO1xuICAgICAgcXVlcnkgPSBuZXcgUGFyc2UuUXVlcnkoXCJIaWdoU2NvcmVcIik7XG4gICAgICBxdWVyeS5kZXNjZW5kaW5nKFwic2NvcmVcIik7XG4gICAgICBxdWVyeS5pbmNsdWRlKFwicGxheWVyXCIpO1xuICAgICAgcXVlcnkubGltaXQoMTApO1xuICAgICAgdGhpcy5zZXQoXCJoaWdoc2NvcmVDb2xsZWN0aW9uXCIsIHF1ZXJ5LmNvbGxlY3Rpb24oKSk7XG4gICAgICB0aGlzLnJlc2V0R2FtZURhdGEoKTtcbiAgICAgIHRoaXMuZ2V0KFwiZWdnQ29sbGVjdGlvblwiKS5vbihcImZseVwiLCB0aGlzLmluY3JlbWVudFNjb3JlKTtcbiAgICAgIHRoaXMuZ2V0KFwiZWdnQ29sbGVjdGlvblwiKS5vbihcImJyZWFrXCIsIHRoaXMuZGVjcmVtZW50TGlmZSk7XG4gICAgICB0aGlzLmdldChcImVnZ0NvbGxlY3Rpb25cIikub24oXCJmbHkgYnJlYWtcIiwgdGhpcy5jbGVhblVwRWdnKTtcbiAgICAgIHJldHVybiB0aGlzLmdldChcImVnZ0NvbGxlY3Rpb25cIikub24oXCJyZW1vdmVcIiwgdGhpcy5pbmNyZW1lbnRMZXZlbCk7XG4gICAgfSxcbiAgICBpbmNyZW1lbnRTY29yZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoXCJzY29yZVwiLCB0aGlzLmdldChcInNjb3JlXCIpICsgMSk7XG4gICAgfSxcbiAgICBkZWNyZW1lbnRMaWZlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuc2V0KFwibGl2ZXNcIiwgdGhpcy5nZXQoXCJsaXZlc1wiKSAtIDEpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBbGl2ZSgpO1xuICAgIH0sXG4gICAgaW5jcmVtZW50TGV2ZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZ2V0KFwiZWdnQ29sbGVjdGlvblwiKS5sZW5ndGggPD0gMCkge1xuICAgICAgICB0aGlzLnNldChcImxldmVsXCIsIHRoaXMuZ2V0KFwibGV2ZWxcIikgKyAxKTtcbiAgICAgICAgdGhpcy5zZXQoXCJzcGVlZFhcIiwgdGhpcy5nZXQoXCJzcGVlZFhcIikgKyAwLjI1KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRWdncygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGVBbGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5nZXQoXCJsaXZlc1wiKSA8PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldChcInNjZW5lXCIsIFwiZ2FtZV9vdmVyXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYWRkRWdnczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbnVtRWdncywgX3Jlc3VsdHM7XG4gICAgICBudW1FZ2dzID0gMTA7XG4gICAgICBpID0gMDtcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAoaSA8IG51bUVnZ3MpIHtcbiAgICAgICAgdGhpcy5nZXQoXCJlZ2dDb2xsZWN0aW9uXCIpLmFkZChuZXcgRWdnTW9kZWwoe1xuICAgICAgICAgIGNvbGxlY3Rpb25JbmRleDogaVxuICAgICAgICB9KSk7XG4gICAgICAgIF9yZXN1bHRzLnB1c2goaSsrKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9LFxuICAgIGNsZWFuVXBFZ2c6IGZ1bmN0aW9uKGVnZ01vZGVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoXCJlZ2dDb2xsZWN0aW9uXCIpLnJlbW92ZShlZ2dNb2RlbCk7XG4gICAgfSxcbiAgICByZXNldEdhbWVEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChHYW1lU3RhdGUuRGVmYXVsdEdhbWVEYXRhKTtcbiAgICB9LFxuICAgIGdldFNjb3JlU3VibWlzc2lvbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKCh0aGlzLmdldChcImxldmVsXCIpICogMzYyKSA8PCA1KSArIFwiLlwiICsgKCh0aGlzLmdldChcInNjb3JlXCIpICogNjcyKSA8PCA0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBEZWZhdWx0R2FtZURhdGE6IHtcbiAgICAgIHNjb3JlOiAwLFxuICAgICAgbGl2ZXM6IDMsXG4gICAgICBsZXZlbDogMSxcbiAgICAgIHNwZWVkWDogMVxuICAgIH1cbiAgfSk7XG4gIEVnZ01vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICBkZWZhdWx0czoge1xuICAgICAgc3ByaXRlSW5kZXg6IDEsXG4gICAgICBjb2xsZWN0aW9uSW5kZXg6IDBcbiAgICB9LFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF8uYmluZEFsbCh0aGlzKTtcbiAgICB9LFxuICAgIG5leHRTcHJpdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXQoXCJzcHJpdGVJbmRleFwiLCB0aGlzLmdldChcInNwcml0ZUluZGV4XCIpICsgMSk7XG4gICAgICBpZiAodGhpcy5pc1NhZmUoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwiZmx5XCIsIFt0aGlzXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc1NhZmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KFwic3ByaXRlSW5kZXhcIikgPj0gRWdnTW9kZWwuTnVtU3ByaXRlcztcbiAgICB9LFxuICAgIGVnZ0hpdEdyb3VuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaXNTYWZlKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcImJyZWFrXCIsIFt0aGlzXSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgTnVtU3ByaXRlczogNVxuICB9KTtcblxuICAvKlxuICBWaWV3cyAqKioqXG4gICAqL1xuICBFZ2dWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGNsYXNzTmFtZTogXCJlZ2dcIixcbiAgICBzcHJpdGVDbGFzczogXCIuZWdnX3Nwcml0ZV9cIixcbiAgICBlZ2dUZW1wbGF0ZTogXy50ZW1wbGF0ZSgkKFwiI19lZ2dcIikuaHRtbCgpKSxcbiAgICBzY2VuZTogbnVsbCxcbiAgICBldmVudHM6IHtcbiAgICAgIHdlYmtpdFRyYW5zaXRpb25FbmQ6IFwiaGFuZGxlVHJhbnNpdGlvbkVuZGVkXCIsXG4gICAgICBtb3pUcmFuc2l0aW9uRW5kOiBcImhhbmRsZVRyYW5zaXRpb25FbmRlZFwiLFxuICAgICAgdHJhbnNpdGlvbmVuZDogXCJoYW5kbGVUcmFuc2l0aW9uRW5kZWRcIlxuICAgIH0sXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICBfLmJpbmRBbGwodGhpcyk7XG4gICAgICB0aGlzLnNjZW5lID0gdGhpcy5vcHRpb25zLnNjZW5lO1xuICAgICAgdGhpcy5nYW1lU3RhdGUgPSB0aGlzLm9wdGlvbnMuZ2FtZVN0YXRlO1xuICAgICAgdGhpcy4kZWwub24oVXRpbHMuY2xpY2tEb3duT3JUb3VjaCgpLCB0aGlzLm5leHRTcHJpdGUpO1xuICAgICAgdGhpcy5tb2RlbC5vbihcImNoYW5nZTpzcHJpdGVJbmRleFwiLCB0aGlzLnJlbmRlclNwcml0ZXMpO1xuICAgICAgdGhpcy5tb2RlbC5vbihcImZseVwiLCB0aGlzLnJlbmRlckZseWluZyk7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5vbihcImJyZWFrXCIsIHRoaXMucmVuZGVyQnJlYWtpbmcpO1xuICAgIH0sXG4gICAgbmV4dFNwcml0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMubW9kZWwuaXNTYWZlKCkpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5uZXh0U3ByaXRlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGVsYXksIGludGVybWlzc2lvbiwgbGVmdCwgc2VsZiwgc3BlZWQsIHRvcDtcbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5yZW5kZXJTcHJpdGVzKCk7XG4gICAgICBpbnRlcm1pc3Npb24gPSAzLjU7XG4gICAgICBkZWxheSA9IHZvaWQgMDtcbiAgICAgIGlmICh0aGlzLm1vZGVsLmdldChcImNvbGxlY3Rpb25JbmRleFwiKSA9PT0gMSkge1xuICAgICAgICBkZWxheSA9IGludGVybWlzc2lvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGF5ID0gKE1hdGgucmFuZG9tKCkgKiA2ICsgMykgLyB0aGlzLmdhbWVTdGF0ZS5nZXQoXCJzcGVlZFhcIikgKyAoMiAqIHRoaXMubW9kZWwuZ2V0KFwiY29sbGVjdGlvbkluZGV4XCIpKSArIGludGVybWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHNwZWVkID0gMTAwICogdGhpcy5nYW1lU3RhdGUuZ2V0KFwic3BlZWRYXCIpICsgTWF0aC5yYW5kb20oKSAqIDEwMCAtIDUwO1xuICAgICAgbGVmdCA9IE1hdGgucmFuZG9tKCkgKiAoJCh3aW5kb3cpLndpZHRoKCkgLSAxMDApICsgMzA7XG4gICAgICB0b3AgPSAkKFwiI3N0YWdlXCIpLmhlaWdodCgpIC0gMjIwO1xuICAgICAgdGhpcy4kZWwuY3NzKFV0aWxzLmJwKCkgKyBcInRyYW5zaXRpb24tZGVsYXlcIiwgZGVsYXkgKyBcInNcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoVXRpbHMuYnAoKSArIFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCAkKHdpbmRvdykuaGVpZ2h0KCkgLyBzcGVlZCArIFwic1wiKTtcbiAgICAgIHRoaXMuJGVsLmNzcyhVdGlscy5icCgpICsgXCJ0cmFuc2l0aW9uLXByb3BlcnR5XCIsIFwidG9wIG9wYWNpdHlcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoVXRpbHMuYnAoKSArIFwidHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIiwgXCJsaW5lYXJcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoXCJsZWZ0XCIsIGxlZnQgKyBcInB4XCIpO1xuICAgICAgdGhpcy5zY2VuZS5hcHBlbmQodGhpcy4kZWwpO1xuICAgICAgcmV0dXJuIFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc2VsZi4kZWwuY3NzKFwidG9wXCIsIHRvcCArIFwicHhcIik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbmRlclNwcml0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwodGhpcy5lZ2dUZW1wbGF0ZSh7XG4gICAgICAgIHNwcml0ZUluZGV4OiB0aGlzLm1vZGVsLmdldChcInNwcml0ZUluZGV4XCIpXG4gICAgICB9KSk7XG4gICAgfSxcbiAgICByZW5kZXJCcmVha2luZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImNyYWNrZWRcIikuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbiAgICAgIHRoaXMuJGVsLmNzcyhVdGlscy5icCgpICsgXCJ0cmFuc2l0aW9uLWRlbGF5XCIsIFwiMHNcIik7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuY3NzKFV0aWxzLmJwKCkgKyBcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgXCIwLjJzXCIpO1xuICAgIH0sXG4gICAgcmVuZGVySGlkZGluZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImJyb2tlblwiKTtcbiAgICAgIHRoaXMuJGVsLmNzcyhVdGlscy5icCgpICsgXCJ0cmFuc2l0aW9uLWRlbGF5XCIsIFwiMXNcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoVXRpbHMuYnAoKSArIFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCBcIjAuNXNcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoVXRpbHMuYnAoKSArIFwidHJhbnNpdGlvbi1wcm9wZXJ0eVwiLCBcIm9wYWNpdHlcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoVXRpbHMuYnAoKSArIFwidHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIiwgXCJsaW5lYXJcIik7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuY3NzKFwib3BhY2l0eVwiLCAwKTtcbiAgICB9LFxuICAgIHJlbmRlckZseWluZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImZseWluZ1wiKTtcbiAgICAgIHRoaXMuJGVsLmNzcyhVdGlscy5icCgpICsgXCJ0cmFuc2l0aW9uLWRlbGF5XCIsIFwiMHNcIik7XG4gICAgICB0aGlzLiRlbC5jc3MoVXRpbHMuYnAoKSArIFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCBcIjFzXCIpO1xuICAgICAgdGhpcy4kZWwuY3NzKFV0aWxzLmJwKCkgKyBcInRyYW5zaXRpb24tcHJvcGVydHlcIiwgXCJ0b3BcIik7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuY3NzKFV0aWxzLmJwKCkgKyBcInRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uXCIsIFwibGluZWFyXCIpO1xuICAgIH0sXG4gICAgcmVuZGVyUmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW92ZSgpO1xuICAgIH0sXG4gICAgaGFuZGxlVHJhbnNpdGlvbkVuZGVkOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgc2VsZjtcbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT09IFwib3BhY2l0eVwiKSB7XG4gICAgICAgIHNlbGYucmVuZGVyUmVtb3ZlKCk7XG4gICAgICB9IGVsc2UgaWYgKGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT09IFwidG9wXCIpIHtcbiAgICAgICAgc2VsZi5tb2RlbC5lZ2dIaXRHcm91bmQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSBVdGlscy5icCgpICsgXCJ0cmFuc2Zvcm1cIiB8fCBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgc2VsZi5yZW5kZXJIaWRkaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xuICBTdGFnZSA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBlbDogXCIjc3RhZ2VcIixcbiAgICB0aWxlVGVtcGxhdGU6IF8udGVtcGxhdGUoJChcIiNfdGlsZV9wYWlyXCIpLmh0bWwoKSksXG4gICAgdHJlZVRlbXBsYXRlOiBfLnRlbXBsYXRlKCQoXCIjX3RyZWVcIikuaHRtbCgpKSxcbiAgICBzdW5UZW1wbGF0ZTogXy50ZW1wbGF0ZSgkKFwiI19zdW5cIikuaHRtbCgpKSxcbiAgICBjbG91ZFRlbXBsYXRlOiBfLnRlbXBsYXRlKCQoXCIjX2Nsb3VkXCIpLmh0bWwoKSksXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXy5iaW5kQWxsKHRoaXMpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLmNzcyhcImhlaWdodFwiLCAkKHdpbmRvdykuaGVpZ2h0KCkpO1xuICAgICAgdGhpcy5yZW5kZXJTdW4oKTtcbiAgICAgIHRoaXMucmVuZGVyVHJlZXMoKTtcbiAgICAgIHRoaXMucmVuZGVyVGlsZXMoKTtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckNsb3VkcygpO1xuICAgIH0sXG4gICAgcmVuZGVyVGlsZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kKFwiLnRpbGVcIikucmVtb3ZlKCk7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuYXBwZW5kKHRoaXMudGlsZVRlbXBsYXRlKCkpO1xuICAgIH0sXG4gICAgcmVuZGVyU3VuOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJChcIi5zdW5cIikucmVtb3ZlKCk7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuYXBwZW5kKHRoaXMuc3VuVGVtcGxhdGUoKSk7XG4gICAgfSxcbiAgICByZW5kZXJUcmVlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVmdCwgbnVtVHJlZXMsIF9yZXN1bHRzO1xuICAgICAgbnVtVHJlZXMgPSBNYXRoLmNlaWwoJCh3aW5kb3cpLndpZHRoKCkgLyAyMDApO1xuICAgICAgdGhpcy4kKFwiLnRyZWVcIikucmVtb3ZlKCk7XG4gICAgICBpZiAobnVtVHJlZXMgPD0gMikge1xuICAgICAgICB0aGlzLiRlbC5hcHBlbmQodGhpcy50cmVlVGVtcGxhdGUoe1xuICAgICAgICAgIHRyZWVOdW06IDMsXG4gICAgICAgICAgbGVmdFZhbHVlOiAtMTAwXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmFwcGVuZCh0aGlzLnRyZWVUZW1wbGF0ZSh7XG4gICAgICAgICAgdHJlZU51bTogMSxcbiAgICAgICAgICBsZWZ0VmFsdWU6IDEyMFxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gMDtcbiAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgd2hpbGUgKGkgPCBudW1UcmVlcykge1xuICAgICAgICAgIGxlZnQgPSBNYXRoLnJhbmRvbSgpICogMjAwLiArIGkgKiAyMDA7XG4gICAgICAgICAgdGhpcy4kZWwuYXBwZW5kKHRoaXMudHJlZVRlbXBsYXRlKHtcbiAgICAgICAgICAgIHRyZWVOdW06IC0xLFxuICAgICAgICAgICAgbGVmdFZhbHVlOiBsZWZ0IC0gMzAwXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIF9yZXN1bHRzLnB1c2goaSsrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJDbG91ZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRlbGF5LCBkaXIsIGksIG51bUNsb3Vkcywgc3BlZWQsIHRvcCwgX3Jlc3VsdHM7XG4gICAgICBudW1DbG91ZHMgPSBNYXRoLmNlaWwoJCh3aW5kb3cpLndpZHRoKCkgLyAyMDApO1xuICAgICAgbnVtQ2xvdWRzID0gKG51bUNsb3VkcyA8IDIgPyAyIDogbnVtQ2xvdWRzKTtcbiAgICAgIGkgPSAwO1xuICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlIChpIDwgbnVtQ2xvdWRzKSB7XG4gICAgICAgIHRvcCA9IE1hdGgucmFuZG9tKCkgKiA1MDtcbiAgICAgICAgZGVsYXkgPSBNYXRoLnJhbmRvbSgpICogOCAtIDQgKyAoMTAgKiBpKTtcbiAgICAgICAgc3BlZWQgPSAyMDtcbiAgICAgICAgZGlyID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpIDwgMSA/IFwibGVmdFwiIDogXCJyaWdodFwiKTtcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKHRoaXMuY2xvdWRUZW1wbGF0ZSh7XG4gICAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICAgIGRpcmVjdGlvbjogZGlyLFxuICAgICAgICAgIGR1cmF0aW9uOiAkKHdpbmRvdykud2lkdGgoKSAvIHNwZWVkLFxuICAgICAgICAgIHRvcFZhbHVlOiB0b3BcbiAgICAgICAgfSkpO1xuICAgICAgICBfcmVzdWx0cy5wdXNoKGkrKyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgfVxuICB9KTtcbiAgTWVudVNjZW5lID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGNsYXNzTmFtZTogXCJtZW51X3NjZW5lXCIsXG4gICAgZXZlbnRzOiB7XG4gICAgICBcImFuaW1hdGlvbmVuZCAudGl0bGVcIjogXCJjbGVhblVwXCIsXG4gICAgICBcIndlYmtpdEFuaW1hdGlvbkVuZCAudGl0bGVcIjogXCJjbGVhblVwXCIsXG4gICAgICBcIm1vekFuaW1hdGlvbkVuZCAudGl0bGVcIjogXCJjbGVhblVwXCJcbiAgICB9LFxuICAgIHRlbXBsYXRlOiBfLnRlbXBsYXRlKCQoXCIjX21lbnVcIikuaHRtbCgpKSxcbiAgICBzY2VuZU5hbWU6IFwibWVudVwiLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgXy5iaW5kQWxsKHRoaXMpO1xuICAgICAgdGhpcy5tb2RlbC5vbihcImNoYW5nZTpzY2VuZVwiLCB0aGlzLnJlbmRlclNjZW5lQ2hhbmdlKTtcbiAgICAgIHRoaXMuJGVsLm9uKFV0aWxzLmNsaWNrVXBPclRvdWNoKCksIFwiI3BsYXlfYnV0dG9uXCIsIHRoaXMuaGFuZGxlUGxheUJ1dHRvbik7XG4gICAgICB0aGlzLiRlbC5vbihVdGlscy5jbGlja1VwT3JUb3VjaCgpLCBcIiNoaWdoc2NvcmVfYnV0dG9uXCIsIHRoaXMuaGFuZGxlSGlnaHNjb3JlQnV0dG9uKTtcbiAgICAgIHRoaXMuJGVsLm9uKFV0aWxzLmNsaWNrVXBPclRvdWNoKCksIFwiI2NyZWRpdHNfYnV0dG9uXCIsIHRoaXMuaGFuZGxlQ3JlZGl0c0J1dHRvbik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGhhbmRsZVBsYXlCdXR0b246IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuJChcIi5tZW51X2l0ZW1cIikuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbiAgICAgIHRoaXMubW9kZWwuc2V0KFwic2NlbmVcIiwgXCJnYW1lXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgaGFuZGxlSGlnaHNjb3JlQnV0dG9uOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLiQoXCIubWVudV9pdGVtXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XG4gICAgICB0aGlzLm1vZGVsLnNldChcInNjZW5lXCIsIFwiaGlnaHNjb3JlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgaGFuZGxlQ3JlZGl0c0J1dHRvbjogZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy4kKFwiLm1lbnVfaXRlbVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgICAgdGhpcy5tb2RlbC5zZXQoXCJzY2VuZVwiLCBcImNyZWRpdHNcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICByZW5kZXJTY2VuZUNoYW5nZTogZnVuY3Rpb24obW9kZWwsIHNjZW5lKSB7XG4gICAgICBpZiAobW9kZWwucHJldmlvdXMoXCJzY2VuZVwiKSA9PT0gdGhpcy5zY2VuZU5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJSZW1vdmVTY2VuZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNjZW5lID09PSB0aGlzLnNjZW5lTmFtZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSgpKTtcbiAgICAgICQoXCIjc3RhZ2VcIikuYXBwZW5kKHRoaXMuJGVsKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyUmVtb3ZlU2NlbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kKFwiLnRpdGxlXCIpLnJlbW92ZUNsYXNzKFwiZGlzcGxheVwiKS5hZGRDbGFzcyhcInJlbW92YWxcIik7XG4gICAgICB0aGlzLiQoXCIubWVudV9pdGVtXCIpLmFkZENsYXNzKFwicmVtb3ZhbFwiKTtcbiAgICAgIHRoaXMuJChcIi50aXRsZVwiKS5jc3MoVXRpbHMuYnAoKSArIFwiYW5pbWF0aW9uLW5hbWVcIiwgXCJyYWlzZVRpdGxlXCIpO1xuICAgICAgdGhpcy4kKFwiLm1lbnVfaXRlbVwiKS5jc3MoVXRpbHMuYnAoKSArIFwiYW5pbWF0aW9uLW5hbWVcIiwgXCJyYWlzZU1lbnVcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGNsZWFuVXA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aGlzLm1vZGVsLmdldChcInNjZW5lXCIpICE9PSB0aGlzLnNjZW5lTmFtZSAmJiAkKGUudGFyZ2V0KS5oYXNDbGFzcyhcInRpdGxlXCIpKSB7XG4gICAgICAgIHRoaXMuJGVsLmVtcHR5KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgR2FtZVNjZW5lID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgIGNsYXNzTmFtZTogXCJnYW1lX3NjZW5lXCIsXG4gICAgZXZlbnRzOiB7XG4gICAgICBhbmltYXRpb25lbmQ6IFwiY2xlYW5VcFwiLFxuICAgICAgd2Via2l0QW5pbWF0aW9uRW5kOiBcImNsZWFuVXBcIixcbiAgICAgIG1vekFuaW1hdGlvbkVuZDogXCJjbGVhblVwXCJcbiAgICB9LFxuICAgIHNjb3JlVGVtcGxhdGU6IF8udGVtcGxhdGUoJChcIiNfZ2FtZV9zY29yZVwiKS5odG1sKCkpLFxuICAgIGxldmVsVGVtcGxhdGU6IF8udGVtcGxhdGUoJChcIiNfZ2FtZV9sZXZlbFwiKS5odG1sKCkpLFxuICAgIGxpdmVzVGVtcGxhdGU6IF8udGVtcGxhdGUoJChcIiNfZ2FtZV9saXZlc1wiKS5odG1sKCkpLFxuICAgIHNjZW5lTmFtZTogXCJnYW1lXCIsXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICBfLmJpbmRBbGwodGhpcyk7XG4gICAgICB0aGlzLmVnZ1ZpZXdzID0gW107XG4gICAgICB0aGlzLiRlbC5vbihVdGlscy5jbGlja1VwT3JUb3VjaCgpLCBcIi5iYWNrX2J1dHRvblwiLCB0aGlzLmhhbmRsZUJhY2tCdXR0b24pO1xuICAgICAgdGhpcy5tb2RlbC5vbihcImNoYW5nZTpzY2VuZVwiLCB0aGlzLnJlbmRlclNjZW5lQ2hhbmdlKTtcbiAgICAgIHRoaXMubW9kZWwuZ2V0KFwiZWdnQ29sbGVjdGlvblwiKS5vbihcImFkZFwiLCB0aGlzLnJlbmRlckFkZEVnZyk7XG4gICAgICB0aGlzLm1vZGVsLm9uKFwiY2hhbmdlOnNjb3JlXCIsIHRoaXMucmVuZGVyU2NvcmUpO1xuICAgICAgdGhpcy5tb2RlbC5vbihcImNoYW5nZTpsaXZlc1wiLCB0aGlzLnJlbmRlckxpdmVzKTtcbiAgICAgIHRoaXMubW9kZWwub24oXCJjaGFuZ2U6bGV2ZWxcIiwgdGhpcy5yZW5kZXJMZXZlbCk7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5vbihcImNoYW5nZTpsZXZlbFwiLCB0aGlzLnJlbmRlckxldmVsTGFiZWwpO1xuICAgIH0sXG4gICAgaGFuZGxlQmFja0J1dHRvbjogZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy4kKFwiLmJhY2tfYnV0dG9uXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXQoXCJzY2VuZVwiLCBcIm1lbnVcIik7XG4gICAgfSxcbiAgICByZW5kZXJTY2VuZUNoYW5nZTogZnVuY3Rpb24obW9kZWwsIHNjZW5lKSB7XG4gICAgICBpZiAobW9kZWwucHJldmlvdXMoXCJzY2VuZVwiKSA9PT0gdGhpcy5zY2VuZU5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJSZW1vdmVTY2VuZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNjZW5lID09PSB0aGlzLnNjZW5lTmFtZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmO1xuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLm1vZGVsLnJlc2V0R2FtZURhdGEoKTtcbiAgICAgIHRoaXMuJChcIiNodWRcIikucmVtb3ZlKCk7XG4gICAgICB0aGlzLiRlbC5hcHBlbmQoXCI8ZGl2IGlkPSdodWQnPjwvZGl2PlwiKTtcbiAgICAgIHRoaXMucmVuZGVyTGV2ZWwoKTtcbiAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc2VsZi5yZW5kZXJMZXZlbExhYmVsKCk7XG4gICAgICB9KSwgMTIwMCk7XG4gICAgICB0aGlzLnJlbmRlclNjb3JlKCk7XG4gICAgICB0aGlzLnJlbmRlckxpdmVzKCk7XG4gICAgICB0aGlzLnJlbmRlckJhY2tCdXR0b24oKTtcbiAgICAgIHRoaXMucmVuZGVyRWdncygpO1xuICAgICAgaWYgKCQoXCIjc3RhZ2UgLlwiICsgdGhpcy5jbGFzc05hbWUpLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICQoXCIjc3RhZ2VcIikuYXBwZW5kKHRoaXMuJGVsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyTGV2ZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuJChcIiNnYW1lX2xldmVsXCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy4kKFwiI2dhbWVfbGV2ZWxcIikucmVwbGFjZVdpdGgodGhpcy5sZXZlbFRlbXBsYXRlKHtcbiAgICAgICAgICBsZXZlbDogdGhpcy5tb2RlbC5nZXQoXCJsZXZlbFwiKVxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiQoXCIjaHVkXCIpLmFwcGVuZCh0aGlzLmxldmVsVGVtcGxhdGUoe1xuICAgICAgICAgIGxldmVsOiB0aGlzLm1vZGVsLmdldChcImxldmVsXCIpXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyTGV2ZWxMYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbC5hcHBlbmQoXCI8cCBjbGFzcz0nbGV2ZWxfbGFiZWwnPkxFVkVMIFwiICsgdGhpcy5tb2RlbC5nZXQoXCJsZXZlbFwiKSArIFwiPGJyPkdFVCBSRUFEWSE8L3A+XCIpO1xuICAgICAgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQoXCIubGV2ZWxfbGFiZWxcIikuYWRkQ2xhc3MoXCJyZW1vdmFsXCIpO1xuICAgICAgfSksIDMwMDApO1xuICAgICAgc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQoXCIubGV2ZWxfbGFiZWxcIikucmVtb3ZlKCk7XG4gICAgICB9KSwgMzMwMCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbmRlclNjb3JlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLiQoXCIjZ2FtZV9zY29yZVwiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuJChcIiNnYW1lX3Njb3JlXCIpLnJlcGxhY2VXaXRoKHRoaXMuc2NvcmVUZW1wbGF0ZSh7XG4gICAgICAgICAgc2NvcmU6IHRoaXMubW9kZWwuZ2V0KFwic2NvcmVcIilcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kKFwiI2h1ZFwiKS5hcHBlbmQodGhpcy5zY29yZVRlbXBsYXRlKHtcbiAgICAgICAgICBzY29yZTogdGhpcy5tb2RlbC5nZXQoXCJzY29yZVwiKVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbmRlckxpdmVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLiQoXCIjZ2FtZV9saXZlc1wiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuJChcIiNnYW1lX2xpdmVzXCIpLnJlcGxhY2VXaXRoKHRoaXMubGl2ZXNUZW1wbGF0ZSh7XG4gICAgICAgICAgbGl2ZXM6IHRoaXMubW9kZWwuZ2V0KFwibGl2ZXNcIilcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kKFwiI2h1ZFwiKS5hcHBlbmQodGhpcy5saXZlc1RlbXBsYXRlKHtcbiAgICAgICAgICBsaXZlczogdGhpcy5tb2RlbC5nZXQoXCJsaXZlc1wiKVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbmRlckJhY2tCdXR0b246IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuJChcIi5iYWNrX2J1dHRvblwiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuJChcIi5iYWNrX2J1dHRvblwiKS5yZXBsYWNlV2l0aChcIjxkaXYgY2xhc3M9J2JhY2tfYnV0dG9uJz5YPC9kaXY+XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kKFwiPGRpdiBjbGFzcz0nYmFja19idXR0b24nPlg8L2Rpdj5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbmRlckVnZ3M6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5tb2RlbC5hZGRFZ2dzKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbmRlckFkZEVnZzogZnVuY3Rpb24oZWdnTW9kZWwsIGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgIHZhciBlZ2dWaWV3O1xuICAgICAgZWdnVmlldyA9IG5ldyBFZ2dWaWV3KHtcbiAgICAgICAgbW9kZWw6IGVnZ01vZGVsLFxuICAgICAgICBnYW1lU3RhdGU6IHRoaXMubW9kZWwsXG4gICAgICAgIHNjZW5lOiB0aGlzLiRlbFxuICAgICAgfSk7XG4gICAgICBlZ2dWaWV3LnJlbmRlcigpO1xuICAgICAgdGhpcy5lZ2dWaWV3cy5wdXNoKGVnZ1ZpZXcpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW5kZXJSZW1vdmVTY2VuZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiQoXCIuYmFja19idXR0b25cIikuY3NzKFV0aWxzLmJwKCkgKyBcImFuaW1hdGlvbi1uYW1lXCIsIFwieFJhaXNlXCIpO1xuICAgICAgdGhpcy4kKFwiI2h1ZCBwXCIpLmNzcyhVdGlscy5icCgpICsgXCJhbmltYXRpb24tbmFtZVwiLCBcInJlbW92ZUhVRFwiKTtcbiAgICAgIHRoaXMuJChcIi5lZ2dcIikuY3NzKFV0aWxzLmJwKCkgKyBcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgXCIwLjNzXCIpO1xuICAgICAgXy5lYWNoKHRoaXMuZWdnVmlld3MsIGZ1bmN0aW9uKGVnZ1ZpZXcpIHtcbiAgICAgICAgcmV0dXJuIGVnZ1ZpZXcucmVuZGVyUmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubW9kZWwuZ2V0KFwiZWdnQ29sbGVjdGlvblwiKS5yZXNldCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjbGVhblVwOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5tb2RlbC5nZXQoXCJzY2VuZVwiKSAhPT0gdGhpcy5zY2VuZU5hbWUgJiYgJChlLnRhcmdldCkuaGFzQ2xhc3MoXCJiYWNrX2J1dHRvblwiKSkge1xuICAgICAgICB0aGlzLiRlbC5lbXB0eSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIEdhbWVPdmVyU2NlbmUgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgY2xhc3NOYW1lOiBcImdhbWVfb3Zlcl9zY2VuZVwiLFxuICAgIGV2ZW50czoge1xuICAgICAgYW5pbWF0aW9uZW5kOiBcImNsZWFuVXBcIixcbiAgICAgIHdlYmtpdEFuaW1hdGlvbkVuZDogXCJjbGVhblVwXCIsXG4gICAgICBtb3pBbmltYXRpb25FbmQ6IFwiY2xlYW5VcFwiXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogXy50ZW1wbGF0ZSgkKFwiI19nYW1lX292ZXJcIikuaHRtbCgpKSxcbiAgICBzY2VuZU5hbWU6IFwiZ2FtZV9vdmVyXCIsXG4gICAgc3VibWl0dGVkOiBmYWxzZSxcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIF8uYmluZEFsbCh0aGlzKTtcbiAgICAgIHRoaXMubW9kZWwub24oXCJjaGFuZ2U6c2NlbmVcIiwgdGhpcy5yZW5kZXJTY2VuZUNoYW5nZSk7XG4gICAgICB0aGlzLiRlbC5vbihVdGlscy5jbGlja1VwT3JUb3VjaCgpLCBcIi5tZW51X2J1dHRvblwiLCB0aGlzLmhhbmRsZU1lbnVCdXR0b24pO1xuICAgICAgdGhpcy4kZWwub24oVXRpbHMuY2xpY2tVcE9yVG91Y2goKSwgXCIucmVwbGF5X2J1dHRvblwiLCB0aGlzLmhhbmRsZVJlcGxheUJ1dHRvbik7XG4gICAgICByZXR1cm4gdGhpcy4kZWwub24oVXRpbHMuY2xpY2tVcE9yVG91Y2goKSwgXCIuZmFjZWJvb2tfYnV0dG9uXCIsIHRoaXMuaGFuZGxlRmFjZWJvb2tCdXR0b24pO1xuICAgIH0sXG4gICAgaGFuZGxlTWVudUJ1dHRvbjogZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy4kKFwiLm1lbnVfaXRlbVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2V0KFwic2NlbmVcIiwgXCJtZW51XCIpO1xuICAgIH0sXG4gICAgaGFuZGxlUmVwbGF5QnV0dG9uOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLiQoXCIubWVudV9pdGVtXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXQoXCJzY2VuZVwiLCBcImdhbWVcIik7XG4gICAgfSxcbiAgICBoYW5kbGVGYWNlYm9va0J1dHRvbjogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHNlbGY7XG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgICQoXCIuZmJfY29udGVudFwiKS5oaWRlKCk7XG4gICAgICAkKFwiLmZhY2Vib29rX2J1dHRvblwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLmVtcHR5KCkuc3Bpbih7XG4gICAgICAgIGxlbmd0aDogNSxcbiAgICAgICAgcmFkaXVzOiA1LFxuICAgICAgICBsaW5lczogOCxcbiAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgIGNvbG9yOiBcIiNmZmZcIlxuICAgICAgfSk7XG4gICAgICBpZiAoUGFyc2UuVXNlci5jdXJyZW50KCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZUhpZ2hTY29yZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFBhcnNlLkZhY2Vib29rVXRpbHMubG9nSW4obnVsbCwge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgIGlmICghdXNlci5leGlzdGVkKCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEZCLmFwaShcIi9tZVwiLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIHVzZXIuc2V0KFwiZGlzcGxheU5hbWVcIiwgcmVzcG9uc2UubmFtZSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5zYXZlKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnNhdmVIaWdoU2NvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHVzZXIsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiT29wcywgc29tZXRoaW5nIHdlbnQgd3Jvbmcgc2F2aW5nIHlvdXIgbmFtZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXCJPb3BzIHNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggZmFjZWJvb2suXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gc2VsZi5zYXZlSGlnaFNjb3JlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24odXNlciwgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIk9vcHMsIHNvbWV0aGluZyB3ZW50IHdyb25nLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2F2ZUhpZ2hTY29yZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiwgc3VibWlzc2lvbjtcbiAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgc3VibWlzc2lvbiA9IHtcbiAgICAgICAgc2NvcmU6IHRoaXMubW9kZWwuZ2V0U2NvcmVTdWJtaXNzaW9uKClcbiAgICAgIH07XG4gICAgICByZXR1cm4gUGFyc2UuQ2xvdWQucnVuKFwic3VibWl0SGlnaHNjb3JlXCIsIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgc2VsZi5zdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBzZWxmLiQoXCIuZmFjZWJvb2tfYnV0dG9uXCIpLmh0bWwoXCJTdWJtaXR0ZWQhXCIpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBzZWxmLnN1Ym1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHNlbGYuJChcIi5mYWNlYm9va19idXR0b25cIikuaHRtbChcIiBYIFRyeSBBZ2Fpbi4uLlwiKS5yZW1vdmVDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlbmRlclNjZW5lQ2hhbmdlOiBmdW5jdGlvbihtb2RlbCwgc2NlbmUpIHtcbiAgICAgIGlmIChtb2RlbC5wcmV2aW91cyhcInNjZW5lXCIpID09PSB0aGlzLnNjZW5lTmFtZSkge1xuICAgICAgICB0aGlzLnJlbmRlclJlbW92ZVNjZW5lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2NlbmUgPT09IHRoaXMuc2NlbmVOYW1lKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbmdyYXRzSW5kZXg7XG4gICAgICBjb25ncmF0c0luZGV4ID0gKHRoaXMubW9kZWwuZ2V0KFwibGV2ZWxcIikgPiBHYW1lT3ZlclNjZW5lLkNvbmdyYXRzLmxlbmd0aCA/IEdhbWVPdmVyU2NlbmUuQ29uZ3JhdHMubGVuZ3RoIC0gMSA6IHRoaXMubW9kZWwuZ2V0KFwibGV2ZWxcIikgLSAxKTtcbiAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh7XG4gICAgICAgIHNjb3JlOiB0aGlzLm1vZGVsLmdldChcInNjb3JlXCIpLFxuICAgICAgICBjb25ncmF0czogR2FtZU92ZXJTY2VuZS5Db25ncmF0c1tjb25ncmF0c0luZGV4XVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuICQoXCIjc3RhZ2VcIikuYXBwZW5kKHRoaXMuJGVsKTtcbiAgICB9LFxuICAgIHJlbmRlclJlbW92ZVNjZW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJChcIi5tZW51X2l0ZW1cIikuYWRkQ2xhc3MoXCJyZW1vdmFsXCIpO1xuICAgICAgdGhpcy4kKFwiLnN1bW1hcnlcIikuYWRkQ2xhc3MoXCJyZW1vdmFsXCIpO1xuICAgICAgdGhpcy4kKFwiLm1lbnVfaXRlbVwiKS5jc3MoVXRpbHMuYnAoKSArIFwiYW5pbWF0aW9uLW5hbWVcIiwgXCJyYWlzZU1lbnVcIik7XG4gICAgICByZXR1cm4gdGhpcy4kKFwiLnN1bW1hcnlcIikuY3NzKFV0aWxzLmJwKCkgKyBcImFuaW1hdGlvbi1uYW1lXCIsIFwicmFpc2VTY29yZXNcIik7XG4gICAgfSxcbiAgICBjbGVhblVwOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5tb2RlbC5nZXQoXCJzY2VuZVwiKSAhPT0gdGhpcy5zY2VuZU5hbWUgJiYgJChlLnRhcmdldCkuaGFzQ2xhc3MoXCJzdW1tYXJ5XCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbC5lbXB0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIENvbmdyYXRzOiBbXCJOb3QgYmFkXCIsIFwiR29vZFwiLCBcIkdyZWF0XCIsIFwiRmFudGFzdGljXCIsIFwiU21hc2hpbmchXCIsIFwiQW1hemluZyFcIiwgXCJGbHlpbmcgSGlnaFwiLCBcIlJpZGljdWxvdXMhXCIsIFwiRXh0cmFvcmRpbmFyeSFcIiwgXCJNb25zdHJvdXMhIVwiXVxuICB9KTtcbiAgSGlnaHNjb3JlU2NlbmUgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgY2xhc3NOYW1lOiBcImhpZ2hzY29yZV9zY2VuZVwiLFxuICAgIGV2ZW50czoge1xuICAgICAgYW5pbWF0aW9uZW5kOiBcImNsZWFuVXBcIixcbiAgICAgIHdlYmtpdEFuaW1hdGlvbkVuZDogXCJjbGVhblVwXCIsXG4gICAgICBtb3pBbmltYXRpb25FbmQ6IFwiY2xlYW5VcFwiXG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogXy50ZW1wbGF0ZSgkKFwiI19oaWdoc2NvcmVcIikuaHRtbCgpKSxcbiAgICBzY29yZVRlbXBsYXRlOiBfLnRlbXBsYXRlKCQoXCIjX3Njb3JlXCIpLmh0bWwoKSksXG4gICAgc2NlbmVOYW1lOiBcImhpZ2hzY29yZVwiLFxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgXy5iaW5kQWxsKHRoaXMpO1xuICAgICAgdGhpcy5tb2RlbC5vbihcImNoYW5nZTpzY2VuZVwiLCB0aGlzLnJlbmRlclNjZW5lQ2hhbmdlKTtcbiAgICAgIHRoaXMubW9kZWwuZ2V0KFwiaGlnaHNjb3JlQ29sbGVjdGlvblwiKS5vbihcInJlc2V0XCIsIHRoaXMucmVuZGVyU2NvcmVDb2xsZWN0aW9uKTtcbiAgICAgIHRoaXMuJGVsLm9uKFV0aWxzLmNsaWNrVXBPclRvdWNoKCksIFwiLmJhY2tfYnV0dG9uXCIsIHRoaXMuaGFuZGxlQmFja0J1dHRvbik7XG4gICAgICBpZiAodGhpcy5tb2RlbC5nZXQoXCJjdXJyZW50U2NlbmVcIikgPT09IHRoaXMuc2NlbmVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlQmFja0J1dHRvbjogZnVuY3Rpb24oZSkge1xuICAgICAgdGhpcy4kKFwiLmJhY2tfYnV0dG9uXCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIik7XG4gICAgICB0aGlzLm1vZGVsLnNldChcInNjZW5lXCIsIFwibWVudVwiKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHJlbmRlclNjZW5lQ2hhbmdlOiBmdW5jdGlvbihtb2RlbCwgc2NlbmUpIHtcbiAgICAgIGlmIChtb2RlbC5wcmV2aW91cyhcInNjZW5lXCIpID09PSB0aGlzLnNjZW5lTmFtZSkge1xuICAgICAgICB0aGlzLnJlbmRlclJlbW92ZVNjZW5lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2NlbmUgPT09IHRoaXMuc2NlbmVOYW1lKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGY7XG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSgpKTtcbiAgICAgIHRoaXMubW9kZWwuZ2V0KFwiaGlnaHNjb3JlQ29sbGVjdGlvblwiKS5mZXRjaCgpO1xuICAgICAgdGhpcy4kKFwiLmhpZ2hzY29yZVwiKS5zcGluKHtcbiAgICAgICAgbGVuZ3RoOiA5LFxuICAgICAgICByYWRpdXM6IDEwLFxuICAgICAgICBsaW5lczogMTIsXG4gICAgICAgIHdpZHRoOiA0LFxuICAgICAgICBjb2xvcjogXCIjZmZmXCJcbiAgICAgIH0pO1xuICAgICAgJChcIiNzdGFnZVwiKS5hcHBlbmQodGhpcy4kZWwpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICByZW5kZXJTY29yZUNvbGxlY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGY7XG4gICAgICBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMubW9kZWwuZ2V0KFwiaGlnaHNjb3JlQ29sbGVjdGlvblwiKS5lYWNoKGZ1bmN0aW9uKHNjb3JlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gc2VsZi5yZW5kZXJTY29yZShzY29yZSwgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgICAkKFwiLmhpZ2hzY29yZSAuc3Bpbm5lclwiKS5yZW1vdmUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyU2NvcmU6IGZ1bmN0aW9uKHNjb3JlLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuJChcIiNzY29yZV90YWJsZSB0Ym9keVwiKS5hcHBlbmQodGhpcy5zY29yZVRlbXBsYXRlKHtcbiAgICAgICAgc2NvcmU6IHNjb3JlLFxuICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIHJlbmRlclJlbW92ZVNjZW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJChcIi5tZW51X2l0ZW1cIikuYWRkQ2xhc3MoXCJyZW1vdmFsXCIpO1xuICAgICAgdGhpcy4kKFwiLmhpZ2hzY29yZVwiKS5hZGRDbGFzcyhcInJlbW92YWxcIik7XG4gICAgICB0aGlzLiQoXCIubWVudV9pdGVtXCIpLmNzcyhVdGlscy5icCgpICsgXCJhbmltYXRpb24tbmFtZVwiLCBcInJhaXNlTWVudVwiKTtcbiAgICAgIHJldHVybiB0aGlzLiQoXCIuaGlnaHNjb3JlXCIpLmNzcyhVdGlscy5icCgpICsgXCJhbmltYXRpb24tbmFtZVwiLCBcInJhaXNlU2NvcmVzXCIpO1xuICAgIH0sXG4gICAgY2xlYW5VcDogZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKHRoaXMubW9kZWwuZ2V0KFwic2NlbmVcIikgIT09IHRoaXMuc2NlbmVOYW1lICYmICQoZS50YXJnZXQpLmhhc0NsYXNzKFwiaGlnaHNjb3JlXCIpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRlbC5lbXB0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIENyZWRpdHNTY2VuZSA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICBjbGFzc05hbWU6IFwiY3JlZGl0c19zY2VuZVwiLFxuICAgIHRlbXBsYXRlOiBfLnRlbXBsYXRlKCQoXCIjX2NyZWRpdHNcIikuaHRtbCgpKSxcbiAgICBzY2VuZU5hbWU6IFwiY3JlZGl0c1wiLFxuICAgIGV2ZW50czoge1xuICAgICAgYW5pbWF0aW9uZW5kOiBcImNsZWFuVXBcIixcbiAgICAgIHdlYmtpdEFuaW1hdGlvbkVuZDogXCJjbGVhblVwXCIsXG4gICAgICBtb3pBbmltYXRpb25FbmQ6IFwiY2xlYW5VcFwiXG4gICAgfSxcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIF8uYmluZEFsbCh0aGlzKTtcbiAgICAgIHRoaXMubW9kZWwub24oXCJjaGFuZ2U6c2NlbmVcIiwgdGhpcy5yZW5kZXJTY2VuZUNoYW5nZSk7XG4gICAgICByZXR1cm4gdGhpcy4kZWwub24oVXRpbHMuY2xpY2tVcE9yVG91Y2goKSwgXCIuYmFja19idXR0b25cIiwgdGhpcy5oYW5kbGVCYWNrQnV0dG9uKTtcbiAgICB9LFxuICAgIGhhbmRsZUJhY2tCdXR0b246IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuJChcIi5iYWNrX2J1dHRvblwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgICAgdGhpcy5tb2RlbC5zZXQoXCJzY2VuZVwiLCBcIm1lbnVcIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICByZW5kZXJTY2VuZUNoYW5nZTogZnVuY3Rpb24obW9kZWwsIHNjZW5lKSB7XG4gICAgICBpZiAobW9kZWwucHJldmlvdXMoXCJzY2VuZVwiKSA9PT0gdGhpcy5zY2VuZU5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJSZW1vdmVTY2VuZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNjZW5lID09PSB0aGlzLnNjZW5lTmFtZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmO1xuICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUoKSk7XG4gICAgICAkKFwiI3N0YWdlXCIpLmFwcGVuZCh0aGlzLiRlbCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHJlbmRlclJlbW92ZVNjZW5lOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJChcIi5jcmVkaXRzXCIpLmFkZENsYXNzKFwicmVtb3ZhbFwiKTtcbiAgICAgIHRoaXMuJChcIi5iYWNrX2J1dHRvblwiKS5hZGRDbGFzcyhcInJlbW92YWxcIik7XG4gICAgICB0aGlzLiQoXCIuY3JlZGl0c1wiKS5jc3MoVXRpbHMuYnAoKSArIFwiYW5pbWF0aW9uLW5hbWVcIiwgXCJyYWlzZU1lbnVcIik7XG4gICAgICByZXR1cm4gdGhpcy4kKFwiLmJhY2tfYnV0dG9uXCIpLmNzcyhVdGlscy5icCgpICsgXCJhbmltYXRpb24tbmFtZVwiLCBcInJhaXNlTWVudVwiKTtcbiAgICB9LFxuICAgIGNsZWFuVXA6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICh0aGlzLm1vZGVsLmdldChcInNjZW5lXCIpICE9PSB0aGlzLnNjZW5lTmFtZSAmJiAkKGUudGFyZ2V0KS5oYXNDbGFzcyhcImNyZWRpdHNcIikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmVtcHR5KCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIEdhbWUuaW5pdGlhbGl6ZSgpO1xufSk7XG5cbndpbmRvdy5VdGlscyA9IHtcbiAgYnA6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBicDtcbiAgICBicCA9IFwiXCI7XG4gICAgaWYgKCQuYnJvd3Nlci53ZWJraXQpIHtcbiAgICAgIGJwID0gXCItd2Via2l0LVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJC5icm93c2VyLm1vemlsbGEpIHtcbiAgICAgICAgYnAgPSBcIi1tb3otXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBicDtcbiAgfSxcbiAgaXNTdXBwb3J0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhKCQuYnJvd3Nlci5tc2llICYmIHBhcnNlSW50KCQuYnJvd3Nlci52ZXJzaW9uKSA8IDEwKTtcbiAgfSxcbiAgbmV4dFRpY2s6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jLCAwKTtcbiAgfSxcbiAgY2xpY2tVcE9yVG91Y2g6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICBpZiAoXCJvbnRvdWNoc3RhcnRcIiBpbiB3aW5kb3cpIHtcbiAgICAgIHJldHVybiBcInRvdWNoc3RhcnRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibW91c2V1cFwiO1xuICAgIH1cbiAgfSxcbiAgY2xpY2tEb3duT3JUb3VjaDogZnVuY3Rpb24oZnVuYykge1xuICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIFwidG91Y2hzdGFydFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJtb3VzZWRvd25cIjtcbiAgICB9XG4gIH1cbn07XG5cbiQuZm4uc3BpbiA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkdGhpcywgZGF0YTtcbiAgICAkdGhpcyA9ICQodGhpcyk7XG4gICAgZGF0YSA9ICR0aGlzLmRhdGEoKTtcbiAgICBpZiAoZGF0YS5zcGlubmVyKSB7XG4gICAgICBkYXRhLnNwaW5uZXIuc3RvcCgpO1xuICAgICAgZGVsZXRlIGRhdGEuc3Bpbm5lcjtcbiAgICB9XG4gICAgaWYgKG9wdHMgIT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YS5zcGlubmVyID0gbmV3IFNwaW5uZXIoJC5leHRlbmQoe1xuICAgICAgICBjb2xvcjogJHRoaXMuY3NzKFwiY29sb3JcIilcbiAgICAgIH0sIG9wdHMpKS5zcGluKHRoaXMpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUGFyc2UuaW5pdGlhbGl6ZShcIjBaVW4xVGFERjlHM2o2VWh2b05GdUlWU3pGNDV2cFNPOUswcmxvc01cIiwgXCJvVTFUb1o5TE5ab01zbHBocGd4UU5vVmpKWEVxb2k1OU0wMThaUDA4XCIpO1xuXG53aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFBhcnNlLkZhY2Vib29rVXRpbHMuaW5pdCh7XG4gICAgYXBwSWQ6IFwiMTM4MDEwMzE4MjI1MDUyMFwiLFxuICAgIGNoYW5uZWxVcmw6IFwiL2NoYW5uZWwuaHRtbFwiLFxuICAgIHN0YXR1czogdHJ1ZSxcbiAgICBjb29raWU6IHRydWUsXG4gICAgeGZibWw6IHRydWVcbiAgfSk7XG59O1xuXG4oZnVuY3Rpb24oZCwgZGVidWcpIHtcbiAgdmFyIGlkLCBqcywgcmVmO1xuICBqcyA9IHZvaWQgMDtcbiAgaWQgPSBcImZhY2Vib29rLWpzc2RrXCI7XG4gIHJlZiA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBqcyA9IGQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAganMuaWQgPSBpZDtcbiAganMuYXN5bmMgPSB0cnVlO1xuICBqcy5zcmMgPSBcIi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvYWxsXCIgKyAoZGVidWcgPyBcIi9kZWJ1Z1wiIDogXCJcIikgKyBcIi5qc1wiO1xuICByZXR1cm4gcmVmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGpzLCByZWYpO1xufSkoZG9jdW1lbnQsIGZhbHNlKTtcbiJdfQ==
